
assignment_day9_que3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001658  08001658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016a4  080016a4  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080016a4  080016a4  000026a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016ac  080016ac  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016ac  080016ac  000026ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016b0  080016b0  000026b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080016b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f41  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a82  00000000  00000000  00004fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00005a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000166  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019776  00000000  00000000  00005dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029f8  00000000  00000000  0001f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c126  00000000  00000000  00021f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ae052  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b0c  00000000  00000000  000ae098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aeba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  000aebc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001640 	.word	0x08001640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001640 	.word	0x08001640

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <SPI_WriteIO>:

#include"accel.h"
#include"spi.h"

void SPI_WriteIO(uint8_t regr, uint8_t data[], uint8_t size)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	SPI_CS_Enable();
 80002d0:	f000 fc3c 	bl	8000b4c <SPI_CS_Enable>
	regr &=~BV(7);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002da:	71fb      	strb	r3, [r7, #7]
	SPI_Transmit(regr);
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fc4f 	bl	8000b84 <SPI_Transmit>
	for(int i=0;i<size;i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e009      	b.n	8000300 <SPI_WriteIO+0x40>
	SPI_Transmit(data[i]);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fc45 	bl	8000b84 <SPI_Transmit>
	for(int i=0;i<size;i++)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	429a      	cmp	r2, r3
 8000306:	dbf1      	blt.n	80002ec <SPI_WriteIO+0x2c>
    SPI_CS_Disable();
 8000308:	f000 fc2e 	bl	8000b68 <SPI_CS_Disable>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <SPI_ReadIO>:

void SPI_ReadIO(uint8_t regr, uint8_t data[], uint8_t size)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	71bb      	strb	r3, [r7, #6]
  SPI_CS_Enable();
 8000324:	f000 fc12 	bl	8000b4c <SPI_CS_Enable>
  regr |=BV(7);
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800032e:	71fb      	strb	r3, [r7, #7]
  SPI_Transmit(regr);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	b29b      	uxth	r3, r3
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fc25 	bl	8000b84 <SPI_Transmit>
  for(int i=0;i<size;i++)
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00b      	b.n	8000358 <SPI_ReadIO+0x44>
  data[i]=SPI_Receive();
 8000340:	f000 fc42 	bl	8000bc8 <SPI_Receive>
 8000344:	4603      	mov	r3, r0
 8000346:	4619      	mov	r1, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	4413      	add	r3, r2
 800034e:	b2ca      	uxtb	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<size;i++)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3301      	adds	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	429a      	cmp	r2, r3
 800035e:	dbef      	blt.n	8000340 <SPI_ReadIO+0x2c>
  SPI_CS_Disable();
 8000360:	f000 fc02 	bl	8000b68 <SPI_CS_Disable>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <LIS_Init>:

void LIS_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
  SPI_Init();
 8000372:	f000 fb85 	bl	8000a80 <SPI_Init>
  DelayMs(3);
 8000376:	2003      	movs	r0, #3
 8000378:	f7ff ff7a 	bl	8000270 <DelayMs>
  uint8_t config = LIS_CR4_RATE_25 | LIS_CR4_XYZ_EN;
 800037c:	2347      	movs	r3, #71	@ 0x47
 800037e:	71fb      	strb	r3, [r7, #7]
  SPI_WriteIO(LIS_CR4_ADDR ,&config, 1);
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	2020      	movs	r0, #32
 8000388:	f7ff ff9a 	bl	80002c0 <SPI_WriteIO>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <LIS_IsDataAvail>:

int LIS_IsDataAvail(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	uint8_t status;
	do
	{
	SPI_ReadIO(LIS_STATUS_ADDR,&status,1);
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	2027      	movs	r0, #39	@ 0x27
 80003a2:	f7ff ffb7 	bl	8000314 <SPI_ReadIO>
	}
   while(!(status &LIS_SR_XYZDA));
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 0308 	and.w	r3, r3, #8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f4      	beq.n	800039a <LIS_IsDataAvail+0x6>
	return 1;
 80003b0:	2301      	movs	r3, #1
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <LIS_GetData>:

LIS_Data LIS_GetData(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b086      	sub	sp, #24
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 uint8_t data[2];
 LIS_Data val;

 SPI_ReadIO(LIS_XL_ADDR,data,2);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2202      	movs	r2, #2
 80003c8:	4619      	mov	r1, r3
 80003ca:	2028      	movs	r0, #40	@ 0x28
 80003cc:	f7ff ffa2 	bl	8000314 <SPI_ReadIO>
 val.x=((uint8_t)data[1]<<8)|data[0];
 80003d0:	7d7b      	ldrb	r3, [r7, #21]
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	7d3b      	ldrb	r3, [r7, #20]
 80003d8:	b21b      	sxth	r3, r3
 80003da:	4313      	orrs	r3, r2
 80003dc:	b21b      	sxth	r3, r3
 80003de:	81bb      	strh	r3, [r7, #12]

 SPI_ReadIO(LIS_YL_ADDR,data,2);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2202      	movs	r2, #2
 80003e6:	4619      	mov	r1, r3
 80003e8:	202a      	movs	r0, #42	@ 0x2a
 80003ea:	f7ff ff93 	bl	8000314 <SPI_ReadIO>
 val.y=((uint8_t)data[1]<<8)|data[0];
 80003ee:	7d7b      	ldrb	r3, [r7, #21]
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	b21a      	sxth	r2, r3
 80003f4:	7d3b      	ldrb	r3, [r7, #20]
 80003f6:	b21b      	sxth	r3, r3
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	81fb      	strh	r3, [r7, #14]

 SPI_ReadIO(LIS_ZL_ADDR,data,2);
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	2202      	movs	r2, #2
 8000404:	4619      	mov	r1, r3
 8000406:	202c      	movs	r0, #44	@ 0x2c
 8000408:	f7ff ff84 	bl	8000314 <SPI_ReadIO>
 val.z=((uint8_t)data[1]<<8)|data[0];
 800040c:	7d7b      	ldrb	r3, [r7, #21]
 800040e:	021b      	lsls	r3, r3, #8
 8000410:	b21a      	sxth	r2, r3
 8000412:	7d3b      	ldrb	r3, [r7, #20]
 8000414:	b21b      	sxth	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b21b      	sxth	r3, r3
 800041a:	823b      	strh	r3, [r7, #16]

  return val;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	461a      	mov	r2, r3
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	6818      	ldr	r0, [r3, #0]
 8000426:	6010      	str	r0, [r2, #0]
 8000428:	889b      	ldrh	r3, [r3, #4]
 800042a:	8093      	strh	r3, [r2, #4]
}
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <I2C_Init>:
Date: Sep 24, 2024
*/

#include "i2c.h"

void I2C_Init(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	// PB6, PB7 -- GPIO Init -- MODER, AFRL, PUPDR, CLKEN
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000438:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <I2C_Init+0xb8>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a2b      	ldr	r2, [pc, #172]	@ (80004ec <I2C_Init+0xb8>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= (BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1));
 8000444:	4b2a      	ldr	r3, [pc, #168]	@ (80004f0 <I2C_Init+0xbc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a29      	ldr	r2, [pc, #164]	@ (80004f0 <I2C_Init+0xbc>)
 800044a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800044e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(SCL_PIN*2) | BV(SDA_PIN*2));
 8000450:	4b27      	ldr	r3, [pc, #156]	@ (80004f0 <I2C_Init+0xbc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a26      	ldr	r2, [pc, #152]	@ (80004f0 <I2C_Init+0xbc>)
 8000456:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 800045a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1) | BV(SCL_PIN*2) | BV(SDA_PIN*2)); // no pull-up/down
 800045c:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <I2C_Init+0xbc>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <I2C_Init+0xbc>)
 8000462:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000466:	60d3      	str	r3, [r2, #12]
    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= BV(30) | BV(26);
 8000468:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <I2C_Init+0xbc>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a20      	ldr	r2, [pc, #128]	@ (80004f0 <I2C_Init+0xbc>)
 800046e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000472:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] &= ~(BV(31) | BV(29) | BV(28) | BV(27) | BV(25) | BV(24));
 8000474:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <I2C_Init+0xbc>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a1d      	ldr	r2, [pc, #116]	@ (80004f0 <I2C_Init+0xbc>)
 800047a:	f023 433b 	bic.w	r3, r3, #3137339392	@ 0xbb000000
 800047e:	6213      	str	r3, [r2, #32]

	// I2C1 Init -- CR1, CR2, CCR, TRISE, CLKEN
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000480:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <I2C_Init+0xb8>)
 8000482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000484:	4a19      	ldr	r2, [pc, #100]	@ (80004ec <I2C_Init+0xb8>)
 8000486:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800048a:	6413      	str	r3, [r2, #64]	@ 0x40
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <I2C_Init+0xc0>)
 800048e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000492:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000494:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <I2C_Init+0xc0>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
    // set pclk in CR2 (16 MHz)
    I2C1->CR2 |= 16;
 800049a:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <I2C_Init+0xc0>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	4a15      	ldr	r2, [pc, #84]	@ (80004f4 <I2C_Init+0xc0>)
 80004a0:	f043 0310 	orr.w	r3, r3, #16
 80004a4:	6053      	str	r3, [r2, #4]
    // set i2c bitrate to 100KHz (std mode)
    I2C1->CCR &= ~I2C_CCR_FS; // change mode to standard mode
 80004a6:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <I2C_Init+0xc0>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <I2C_Init+0xc0>)
 80004ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004b0:	61d3      	str	r3, [r2, #28]
    I2C1->CCR |= 80;			// CCR = Ton / Tpclk = 5 / 0.0625 = 80
 80004b2:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <I2C_Init+0xc0>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <I2C_Init+0xc0>)
 80004b8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80004bc:	61d3      	str	r3, [r2, #28]
    // standard mode Max Trise = 1000 ns
    // set Trise = Max Trise / Tpclk = 1000 / 62.5 = 17
    I2C1->TRISE |= 17;
 80004be:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <I2C_Init+0xc0>)
 80004c0:	6a1b      	ldr	r3, [r3, #32]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <I2C_Init+0xc0>)
 80004c4:	f043 0311 	orr.w	r3, r3, #17
 80004c8:	6213      	str	r3, [r2, #32]
    // Enable Ack
    I2C1->CR1 |= I2C_CR1_ACK;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <I2C_Init+0xc0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <I2C_Init+0xc0>)
 80004d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004d4:	6013      	str	r3, [r2, #0]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <I2C_Init+0xc0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a06      	ldr	r2, [pc, #24]	@ (80004f4 <I2C_Init+0xc0>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40005400 	.word	0x40005400

080004f8 <I2C_Start>:

void I2C_Start(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	// CR1 -- send start bit
    I2C1->CR1 |= I2C_CR1_START;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <I2C_Start+0x28>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <I2C_Start+0x28>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000506:	6013      	str	r3, [r2, #0]
	// SR1 -- poll for SB (start bit sent)
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000508:	bf00      	nop
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <I2C_Start+0x28>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f9      	beq.n	800050a <I2C_Start+0x12>
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40005400 	.word	0x40005400

08000524 <I2C_Stop>:
void I2C_RepeatStart(void) {
	I2C_Start();
}
void I2C_Stop(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	// CR1 -- send stop bit
    I2C1->CR1 |= I2C_CR1_STOP;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <I2C_Stop+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <I2C_Stop+0x28>)
 800052e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000532:	6013      	str	r3, [r2, #0]
    // SR2 -- poll for bus to be release
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000534:	bf00      	nop
 8000536:	4b05      	ldr	r3, [pc, #20]	@ (800054c <I2C_Stop+0x28>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <I2C_Stop+0x12>
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40005400 	.word	0x40005400

08000550 <I2C_SendSlaveAddr>:
void I2C_SendSlaveAddr(uint8_t slaveAddr) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	// DR -- write slave addr in data regr
    I2C1->DR = slaveAddr;
 800055a:	4a09      	ldr	r2, [pc, #36]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for addr is transferred
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000560:	bf00      	nop
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <I2C_SendSlaveAddr+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800056e:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 8000570:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000572:	4b03      	ldr	r3, [pc, #12]	@ (8000580 <I2C_SendSlaveAddr+0x30>)
 8000574:	699b      	ldr	r3, [r3, #24]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40005400 	.word	0x40005400

08000584 <I2C_SendData>:
void I2C_SendData(uint8_t data) {
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	// SR1 -- wait while previous data is not transmitted
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 800058e:	bf00      	nop
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <I2C_SendData+0x38>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f9      	beq.n	8000590 <I2C_SendData+0xc>
	// DR -- write data in data regr
    I2C1->DR = data;
 800059c:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <I2C_SendData+0x38>)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80005a2:	bf00      	nop
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <I2C_SendData+0x38>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0f9      	beq.n	80005a4 <I2C_SendData+0x20>
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40005400 	.word	0x40005400

080005c0 <I2C_IsDeviceReady>:
	// read content and clear flags
	uint16_t val = I2C1->DR;
	return val;
}

int I2C_IsDeviceReady(uint8_t slaveAddr) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	// DR -- write slave addr in data regr
    I2C1->DR = slaveAddr;
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for addr is transferred
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80005d0:	bf00      	nop
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <I2C_IsDeviceReady+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005e0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <I2C_IsDeviceReady+0x34>)
 80005e4:	699b      	ldr	r3, [r3, #24]
    return 1;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40005400 	.word	0x40005400

080005f8 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000600:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <DelayMs+0x44>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <DelayMs+0x48>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <DelayMs+0x4c>)
 800060c:	fba2 2303 	umull	r2, r3, r2, r3
 8000610:	099b      	lsrs	r3, r3, #6
 8000612:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800061e:	bf00      	nop
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <DelayMs+0x44>)
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	1ad2      	subs	r2, r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3f8      	bcc.n	8000620 <DelayMs+0x28>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	20000000 	.word	0x20000000
 8000644:	10624dd3 	.word	0x10624dd3

08000648 <Lcd_Write4BitAndCtrl>:
 *      Author: Nilesh
 */

#include "i2c_lcd.h"

void Lcd_Write4BitAndCtrl(uint8_t val) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 8000652:	f7ff ff51 	bl	80004f8 <I2C_Start>
	I2C_SendSlaveAddr(LCD_SLAVE_ADDR_W);
 8000656:	204e      	movs	r0, #78	@ 0x4e
 8000658:	f7ff ff7a 	bl	8000550 <I2C_SendSlaveAddr>
	I2C_SendData(val);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff90 	bl	8000584 <I2C_SendData>
	I2C_Stop();
 8000664:	f7ff ff5e 	bl	8000524 <I2C_Stop>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <Lcd_WriteByte>:

void Lcd_WriteByte(uint8_t rs, uint8_t val) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	460a      	mov	r2, r1
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	4613      	mov	r3, r2
 800067e:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	f023 030f 	bic.w	r3, r3, #15
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b80      	cmp	r3, #128	@ 0x80
 8000692:	bf14      	ite	ne
 8000694:	2301      	movne	r3, #1
 8000696:	2300      	moveq	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	737b      	strb	r3, [r7, #13]
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 800069c:	7bfa      	ldrb	r2, [r7, #15]
 800069e:	7b7b      	ldrb	r3, [r7, #13]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f043 030c 	orr.w	r3, r3, #12
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffcc 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ffa1 	bl	80005f8 <DelayMs>
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_BL));
 80006b6:	7bfa      	ldrb	r2, [r7, #15]
 80006b8:	7b7b      	ldrb	r3, [r7, #13]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffbf 	bl	8000648 <Lcd_Write4BitAndCtrl>

	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 030c 	orr.w	r3, r3, #12
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffb5 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff8a 	bl	80005f8 <DelayMs>
	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_BL));
 80006e4:	7bba      	ldrb	r2, [r7, #14]
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffa8 	bl	8000648 <Lcd_Write4BitAndCtrl>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Lcd_Init>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int Lcd_Init() {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 8000706:	2014      	movs	r0, #20
 8000708:	f7ff ff76 	bl	80005f8 <DelayMs>
	I2C_Init();
 800070c:	f7ff fe92 	bl	8000434 <I2C_Init>
	// check if lcd is ready
	I2C_Start();
 8000710:	f7ff fef2 	bl	80004f8 <I2C_Start>
	int ret = I2C_IsDeviceReady(LCD_SLAVE_ADDR_W);
 8000714:	204e      	movs	r0, #78	@ 0x4e
 8000716:	f7ff ff53 	bl	80005c0 <I2C_IsDeviceReady>
 800071a:	6078      	str	r0, [r7, #4]
	I2C_Stop();
 800071c:	f7ff ff02 	bl	8000524 <I2C_Stop>
	if(!ret)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <Lcd_Init+0x2a>
		return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e04a      	b.n	80007c0 <Lcd_Init+0xc0>

	// attention sequence
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800072a:	2034      	movs	r0, #52	@ 0x34
 800072c:	f7ff ff8c 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000730:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000732:	2030      	movs	r0, #48	@ 0x30
 8000734:	f7ff ff88 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f7ff ff5d 	bl	80005f8 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800073e:	2034      	movs	r0, #52	@ 0x34
 8000740:	f7ff ff82 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000744:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000746:	2030      	movs	r0, #48	@ 0x30
 8000748:	f7ff ff7e 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff ff53 	bl	80005f8 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000752:	2034      	movs	r0, #52	@ 0x34
 8000754:	f7ff ff78 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000758:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 800075a:	2030      	movs	r0, #48	@ 0x30
 800075c:	f7ff ff74 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 8000760:	2003      	movs	r0, #3
 8000762:	f7ff ff49 	bl	80005f8 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT | BV(LCD_EN));
 8000766:	2024      	movs	r0, #36	@ 0x24
 8000768:	f7ff ff6e 	bl	8000648 <Lcd_Write4BitAndCtrl>
	__NOP();
 800076c:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT);
 800076e:	2020      	movs	r0, #32
 8000770:	f7ff ff6a 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff ff3f 	bl	80005f8 <DelayMs>

	// lcd initialization
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT_2LINES);
 800077a:	2028      	movs	r0, #40	@ 0x28
 800077c:	f7ff ff64 	bl	8000648 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ff39 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_CTRL);
 8000786:	2108      	movs	r1, #8
 8000788:	2080      	movs	r0, #128	@ 0x80
 800078a:	f7ff ff71 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ff32 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_CLEAR);
 8000794:	2101      	movs	r1, #1
 8000796:	2080      	movs	r0, #128	@ 0x80
 8000798:	f7ff ff6a 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff2b 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_ENTRY_MODE);
 80007a2:	2106      	movs	r1, #6
 80007a4:	2080      	movs	r0, #128	@ 0x80
 80007a6:	f7ff ff63 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff24 	bl	80005f8 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_ON);
 80007b0:	210c      	movs	r1, #12
 80007b2:	2080      	movs	r0, #128	@ 0x80
 80007b4:	f7ff ff5c 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff ff1d 	bl	80005f8 <DelayMs>
	return ret;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Lcd_Puts>:

void Lcd_Puts(uint8_t line, char str[]) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
	int i;
	Lcd_WriteByte(LCD_CMD, line); // line address
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4619      	mov	r1, r3
 80007d8:	2080      	movs	r0, #128	@ 0x80
 80007da:	f7ff ff49 	bl	8000670 <Lcd_WriteByte>
	DelayMs(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff0a 	bl	80005f8 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e00a      	b.n	8000800 <Lcd_Puts+0x38>
		Lcd_WriteByte(LCD_DATA, str[i]);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff ff3b 	bl	8000670 <Lcd_WriteByte>
	for(i=0; str[i]!='\0'; i++)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1ee      	bne.n	80007ea <Lcd_Puts+0x22>
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <LedInit>:
 */


#include "led.h"

void LedInit(uint32_t pin) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <LedInit+0xac>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000824:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <LedInit+0xac>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <LedInit+0xb0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	3201      	adds	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <LedInit+0xb0>)
 8000842:	400b      	ands	r3, r1
 8000844:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <LedInit+0xb0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	0052      	lsls	r2, r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	4611      	mov	r1, r2
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <LedInit+0xb0>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <LedInit+0xb0>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2101      	movs	r1, #1
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	43d2      	mvns	r2, r2
 800086a:	4611      	mov	r1, r2
 800086c:	4a16      	ldr	r2, [pc, #88]	@ (80008c8 <LedInit+0xb0>)
 800086e:	400b      	ands	r3, r1
 8000870:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <LedInit+0xb0>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	0052      	lsls	r2, r2, #1
 800087a:	3201      	adds	r2, #1
 800087c:	2101      	movs	r1, #1
 800087e:	4091      	lsls	r1, r2
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	430a      	orrs	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <LedInit+0xb0>)
 8000892:	400b      	ands	r3, r1
 8000894:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <LedInit+0xb0>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	3201      	adds	r2, #1
 80008a0:	2101      	movs	r1, #1
 80008a2:	4091      	lsls	r1, r2
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	430a      	orrs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <LedInit+0xb0>)
 80008b6:	400b      	ands	r3, r1
 80008b8:	60d3      	str	r3, [r2, #12]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <LedOn>:

void LedOn(uint32_t pin) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <LedOn+0x28>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	2101      	movs	r1, #1
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <LedOn+0x28>)
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6153      	str	r3, [r2, #20]

}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40020c00 	.word	0x40020c00

080008f8 <LedOff>:

void LedOff(uint32_t pin) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <LedOff+0x28>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	2101      	movs	r1, #1
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	43d2      	mvns	r2, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	@ (8000920 <LedOff+0x28>)
 8000912:	400b      	ands	r3, r1
 8000914:	6153      	str	r3, [r2, #20]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40020c00 	.word	0x40020c00

08000924 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <DelayMs+0x44>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <DelayMs+0x48>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <DelayMs+0x4c>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	099b      	lsrs	r3, r3, #6
 800093e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800094a:	bf00      	nop
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <DelayMs+0x44>)
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	1ad2      	subs	r2, r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3f8      	bcc.n	800094c <DelayMs+0x28>
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e0001000 	.word	0xe0001000
 800096c:	20000000 	.word	0x20000000
 8000970:	10624dd3 	.word	0x10624dd3

08000974 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b092      	sub	sp, #72	@ 0x48
 8000978:	af00      	add	r7, sp, #0
	char str[32];
	char str1[32];
	LIS_Data val;
	Lcd_Init();
 800097a:	f7ff fec1 	bl	8000700 <Lcd_Init>
	SystemInit();
 800097e:	f000 f967 	bl	8000c50 <SystemInit>
	LedInit(LED_RED_PIN);
 8000982:	200e      	movs	r0, #14
 8000984:	f7ff ff48 	bl	8000818 <LedInit>
	LedInit(LED_BLUE_PIN);
 8000988:	200f      	movs	r0, #15
 800098a:	f7ff ff45 	bl	8000818 <LedInit>
	LedInit(LED_ORANGE_PIN);
 800098e:	200d      	movs	r0, #13
 8000990:	f7ff ff42 	bl	8000818 <LedInit>
	LedInit(LED_GREEN_PIN);
 8000994:	200c      	movs	r0, #12
 8000996:	f7ff ff3f 	bl	8000818 <LedInit>
//	Lcd_Puts(LCD_LINE1,"LIS3DSH Demo!\r\n");
	LIS_Init(); //initialize accel
 800099a:	f7ff fce7 	bl	800036c <LIS_Init>
	while(1) {
		if(LIS_IsDataAvail()) // check if new data avail
 800099e:	f7ff fcf9 	bl	8000394 <LIS_IsDataAvail>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0fa      	beq.n	800099e <main+0x2a>
		{
			val = LIS_GetData(); // get the new data
 80009a8:	463b      	mov	r3, r7
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fd05 	bl	80003ba <LIS_GetData>
			// print value
			sprintf(str, "X=%d, Y=%d\r\n", val.x, val.y);
 80009b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009b4:	461a      	mov	r2, r3
 80009b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009ba:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80009be:	492e      	ldr	r1, [pc, #184]	@ (8000a78 <main+0x104>)
 80009c0:	f000 f9a6 	bl	8000d10 <siprintf>
			sprintf(str1, "z=%d\r\n", val.z);
 80009c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009c8:	461a      	mov	r2, r3
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	492b      	ldr	r1, [pc, #172]	@ (8000a7c <main+0x108>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f99d 	bl	8000d10 <siprintf>
			DelayMs(500);
 80009d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009da:	f7ff ffa3 	bl	8000924 <DelayMs>
			Lcd_Puts(LCD_LINE1,str);
 80009de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e2:	4619      	mov	r1, r3
 80009e4:	2080      	movs	r0, #128	@ 0x80
 80009e6:	f7ff feef 	bl	80007c8 <Lcd_Puts>
			Lcd_Puts(LCD_LINE2,str1);
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	20c0      	movs	r0, #192	@ 0xc0
 80009f2:	f7ff fee9 	bl	80007c8 <Lcd_Puts>

			if(val.x >=3000)
 80009f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009fa:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80009fe:	4293      	cmp	r3, r2
 8000a00:	dd03      	ble.n	8000a0a <main+0x96>
			{
				LedOn(LED_RED_PIN);
 8000a02:	200e      	movs	r0, #14
 8000a04:	f7ff ff62 	bl	80008cc <LedOn>
 8000a08:	e005      	b.n	8000a16 <main+0xa2>
			}
			else
			{

				LedOff(LED_RED_PIN);
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f7ff ff74 	bl	80008f8 <LedOff>
				DelayMs(50);
 8000a10:	2032      	movs	r0, #50	@ 0x32
 8000a12:	f7ff ff87 	bl	8000924 <DelayMs>
			}
			if(val.x >=3000)
 8000a16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a1a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	dd03      	ble.n	8000a2a <main+0xb6>
						{
							LedOn(LED_BLUE_PIN);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f7ff ff52 	bl	80008cc <LedOn>
 8000a28:	e005      	b.n	8000a36 <main+0xc2>
						}
						else
						{

							LedOff(LED_BLUE_PIN);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f7ff ff64 	bl	80008f8 <LedOff>
							DelayMs(50);
 8000a30:	2032      	movs	r0, #50	@ 0x32
 8000a32:	f7ff ff77 	bl	8000924 <DelayMs>
						}
			if(val.x >=3000)
 8000a36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a3a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dd03      	ble.n	8000a4a <main+0xd6>
						{
							LedOn(LED_ORANGE_PIN);
 8000a42:	200d      	movs	r0, #13
 8000a44:	f7ff ff42 	bl	80008cc <LedOn>
 8000a48:	e005      	b.n	8000a56 <main+0xe2>
						}
						else
						{

							LedOff(LED_ORANGE_PIN);
 8000a4a:	200d      	movs	r0, #13
 8000a4c:	f7ff ff54 	bl	80008f8 <LedOff>
							DelayMs(50);
 8000a50:	2032      	movs	r0, #50	@ 0x32
 8000a52:	f7ff ff67 	bl	8000924 <DelayMs>
						}
			if(val.x >=3000)
 8000a56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a5a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	dd03      	ble.n	8000a6a <main+0xf6>
						{
							LedOn(LED_GREEN_PIN);
 8000a62:	200c      	movs	r0, #12
 8000a64:	f7ff ff32 	bl	80008cc <LedOn>
 8000a68:	e799      	b.n	800099e <main+0x2a>
						}
						else
						{

							LedOff(LED_GREEN_PIN);
 8000a6a:	200c      	movs	r0, #12
 8000a6c:	f7ff ff44 	bl	80008f8 <LedOff>
							DelayMs(50);
 8000a70:	2032      	movs	r0, #50	@ 0x32
 8000a72:	f7ff ff57 	bl	8000924 <DelayMs>
		if(LIS_IsDataAvail()) // check if new data avail
 8000a76:	e792      	b.n	800099e <main+0x2a>
 8000a78:	08001658 	.word	0x08001658
 8000a7c:	08001668 	.word	0x08001668

08000a80 <SPI_Init>:
 */

#include "spi.h"

void SPI_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
 // GPIOE  initialization

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	@ (8000b3c <SPI_Init+0xbc>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	4a2c      	ldr	r2, [pc, #176]	@ (8000b3c <SPI_Init+0xbc>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOE->MODER |=BV(SPI_CS_PIN*2);
 8000a90:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <SPI_Init+0xc0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a2a      	ldr	r2, [pc, #168]	@ (8000b40 <SPI_Init+0xc0>)
 8000a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a9a:	6013      	str	r3, [r2, #0]
    GPIOE->MODER &=~BV(SPI_CS_PIN*2+1);
 8000a9c:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <SPI_Init+0xc0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a27      	ldr	r2, [pc, #156]	@ (8000b40 <SPI_Init+0xc0>)
 8000aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000aa6:	6013      	str	r3, [r2, #0]

    //SET OSPEER=00
    GPIOE->OSPEEDR &=~BV(SPI_CS_PIN*2)|BV(SPI_CS_PIN*2+1);
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <SPI_Init+0xc0>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4a24      	ldr	r2, [pc, #144]	@ (8000b40 <SPI_Init+0xc0>)
 8000aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ab2:	6093      	str	r3, [r2, #8]
    //SET OTYPER=0 (PUSH PULL)
    GPIOE->OTYPER &=~BV(SPI_CS_PIN);
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <SPI_Init+0xc0>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SPI_Init+0xc0>)
 8000aba:	f023 0308 	bic.w	r3, r3, #8
 8000abe:	6053      	str	r3, [r2, #4]
    //NO PUSH AND PULL-UP
    GPIOE->PUPDR &=~BV(SPI_CS_PIN*2)|BV(SPI_CS_PIN*2+1);
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SPI_Init+0xc0>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b40 <SPI_Init+0xc0>)
 8000ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000aca:	60d3      	str	r3, [r2, #12]

    //GPIOA(SPI) INITIALIZATION
    	RCC->AHB1ENR |=RCC_AHB1ENR_GPIOAEN;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <SPI_Init+0xbc>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b3c <SPI_Init+0xbc>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	@ 0x30
    	//SET MODER
    	GPIOA->MODER &=~BV(SPI_SCLK_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_MOSI_PIN*2);
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <SPI_Init+0xc4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	@ (8000b44 <SPI_Init+0xc4>)
 8000ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
    	GPIOA->MODER |=BV(SPI_SCLK_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_MOSI_PIN*2+1);
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <SPI_Init+0xc4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a16      	ldr	r2, [pc, #88]	@ (8000b44 <SPI_Init+0xc4>)
 8000aea:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000aee:	6013      	str	r3, [r2, #0]
      //SELECT ALT FN AF5=0101
    	GPIOA->AFR[0] &=~ BV(31)|BV(29)|BV(27)|BV(25)|BV(23)|BV(21);
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <SPI_Init+0xc4>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a13      	ldr	r2, [pc, #76]	@ (8000b44 <SPI_Init+0xc4>)
 8000af6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000afa:	6213      	str	r3, [r2, #32]
    	GPIOA->AFR[0] |=BV(30)|BV(28)|BV(26)|BV(24)|BV(22)|BV(20);
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <SPI_Init+0xc4>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <SPI_Init+0xc4>)
 8000b02:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000b06:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000b0a:	6213      	str	r3, [r2, #32]

    //SPI initialization
    	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <SPI_Init+0xbc>)
 8000b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SPI_Init+0xbc>)
 8000b12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b16:	6453      	str	r3, [r2, #68]	@ 0x44

    	SPI1->CR1=SPI_CR1_MSTR | SPI_CR1_SSM |SPI_CR1_SSI |SPI_CR1_BR_1;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <SPI_Init+0xc8>)
 8000b1a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000b1e:	601a      	str	r2, [r3, #0]
    	//CR2...DISABLE INTRRUPTS
    	SPI1->CR2 |= 0x0000;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <SPI_Init+0xc8>)
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <SPI_Init+0xc8>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	6053      	str	r3, [r2, #4]
    	SPI1->CR1 |=SPI_CR1_SPE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <SPI_Init+0xc8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <SPI_Init+0xc8>)
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b32:	6013      	str	r3, [r2, #0]


}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40013000 	.word	0x40013000

08000b4c <SPI_CS_Enable>:

void SPI_CS_Enable(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	//GPIOE.3=0
	GPIOE->ODR &=~BV(SPI_CS_PIN);
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SPI_CS_Enable+0x18>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a03      	ldr	r2, [pc, #12]	@ (8000b64 <SPI_CS_Enable+0x18>)
 8000b56:	f023 0308 	bic.w	r3, r3, #8
 8000b5a:	6153      	str	r3, [r2, #20]

}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000

08000b68 <SPI_CS_Disable>:

void SPI_CS_Disable(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	//GPIOE.3=1
   GPIOE->ODR |=BV(SPI_CS_PIN);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <SPI_CS_Disable+0x18>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <SPI_CS_Disable+0x18>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6153      	str	r3, [r2, #20]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <SPI_Transmit>:


uint16_t SPI_Transmit(uint16_t val) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	// wait until previous data is transmitted (txe)
	while(!(SPI1->SR & SPI_SR_TXE));
 8000b8e:	bf00      	nop
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <SPI_Transmit+0x40>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f9      	beq.n	8000b90 <SPI_Transmit+0xc>
	// write data into DR
	SPI1->DR = val;
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <SPI_Transmit+0x40>)
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	60d3      	str	r3, [r2, #12]
	// wait until new data is received (rxne)
	while(!(SPI1->SR & SPI_SR_RXNE));
 8000ba2:	bf00      	nop
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <SPI_Transmit+0x40>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f9      	beq.n	8000ba4 <SPI_Transmit+0x20>
	// read data from DR
	val = SPI1->DR;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SPI_Transmit+0x40>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	80fb      	strh	r3, [r7, #6]

	return val;
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <SPI_Receive>:


uint16_t SPI_Receive(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  uint16_t val= SPI_Transmit(0x00);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ffd8 	bl	8000b84 <SPI_Transmit>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	80fb      	strh	r3, [r7, #6]
  return val;
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f000 f89c 	bl	8000d50 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000070 	.word	0x20000070
 8000c4c:	200001c0 	.word	0x200001c0

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  DWT_Init();
 8000c54:	f000 f802 	bl	8000c5c <DWT_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <DWT_Init+0x58>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <DWT_Init+0x58>)
 8000c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000c6a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <DWT_Init+0x58>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <DWT_Init+0x58>)
 8000c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c76:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <DWT_Init+0x5c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <DWT_Init+0x5c>)
 8000c7e:	f023 0301 	bic.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <DWT_Init+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <DWT_Init+0x5c>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <DWT_Init+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000c96:	bf00      	nop
    __ASM volatile ("NOP");
 8000c98:	bf00      	nop
    __ASM volatile ("NOP");
 8000c9a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <DWT_Init+0x5c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000edf0 	.word	0xe000edf0
 8000cb8:	e0001000 	.word	0xe0001000

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff ffc6 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cea:	f000 f837 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fe41 	bl	8000974 <main>

08000cf2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000d00:	080016b4 	.word	0x080016b4
  ldr r2, =_sbss
 8000d04:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000d08:	200001bc 	.word	0x200001bc

08000d0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <siprintf>:
 8000d10:	b40e      	push	{r1, r2, r3}
 8000d12:	b500      	push	{lr}
 8000d14:	b09c      	sub	sp, #112	@ 0x70
 8000d16:	ab1d      	add	r3, sp, #116	@ 0x74
 8000d18:	9002      	str	r0, [sp, #8]
 8000d1a:	9006      	str	r0, [sp, #24]
 8000d1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <siprintf+0x38>)
 8000d22:	9107      	str	r1, [sp, #28]
 8000d24:	9104      	str	r1, [sp, #16]
 8000d26:	4909      	ldr	r1, [pc, #36]	@ (8000d4c <siprintf+0x3c>)
 8000d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d2c:	9105      	str	r1, [sp, #20]
 8000d2e:	6800      	ldr	r0, [r0, #0]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	a902      	add	r1, sp, #8
 8000d34:	f000 f98c 	bl	8001050 <_svfiprintf_r>
 8000d38:	9b02      	ldr	r3, [sp, #8]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	b01c      	add	sp, #112	@ 0x70
 8000d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d44:	b003      	add	sp, #12
 8000d46:	4770      	bx	lr
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	ffff0208 	.word	0xffff0208

08000d50 <__errno>:
 8000d50:	4b01      	ldr	r3, [pc, #4]	@ (8000d58 <__errno+0x8>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000004 	.word	0x20000004

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000d94 <__libc_init_array+0x38>)
 8000d60:	4c0d      	ldr	r4, [pc, #52]	@ (8000d98 <__libc_init_array+0x3c>)
 8000d62:	1b64      	subs	r4, r4, r5
 8000d64:	10a4      	asrs	r4, r4, #2
 8000d66:	2600      	movs	r6, #0
 8000d68:	42a6      	cmp	r6, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000d9c <__libc_init_array+0x40>)
 8000d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000da0 <__libc_init_array+0x44>)
 8000d70:	f000 fc66 	bl	8001640 <_init>
 8000d74:	1b64      	subs	r4, r4, r5
 8000d76:	10a4      	asrs	r4, r4, #2
 8000d78:	2600      	movs	r6, #0
 8000d7a:	42a6      	cmp	r6, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d84:	4798      	blx	r3
 8000d86:	3601      	adds	r6, #1
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8e:	4798      	blx	r3
 8000d90:	3601      	adds	r6, #1
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	080016ac 	.word	0x080016ac
 8000d98:	080016ac 	.word	0x080016ac
 8000d9c:	080016ac 	.word	0x080016ac
 8000da0:	080016b0 	.word	0x080016b0

08000da4 <__retarget_lock_acquire_recursive>:
 8000da4:	4770      	bx	lr

08000da6 <__retarget_lock_release_recursive>:
 8000da6:	4770      	bx	lr

08000da8 <_free_r>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	4605      	mov	r5, r0
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d041      	beq.n	8000e34 <_free_r+0x8c>
 8000db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000db4:	1f0c      	subs	r4, r1, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bfb8      	it	lt
 8000dba:	18e4      	addlt	r4, r4, r3
 8000dbc:	f000 f8e0 	bl	8000f80 <__malloc_lock>
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e38 <_free_r+0x90>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	b933      	cbnz	r3, 8000dd4 <_free_r+0x2c>
 8000dc6:	6063      	str	r3, [r4, #4]
 8000dc8:	6014      	str	r4, [r2, #0]
 8000dca:	4628      	mov	r0, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b8dc 	b.w	8000f8c <__malloc_unlock>
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d908      	bls.n	8000dea <_free_r+0x42>
 8000dd8:	6820      	ldr	r0, [r4, #0]
 8000dda:	1821      	adds	r1, r4, r0
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	bf01      	itttt	eq
 8000de0:	6819      	ldreq	r1, [r3, #0]
 8000de2:	685b      	ldreq	r3, [r3, #4]
 8000de4:	1809      	addeq	r1, r1, r0
 8000de6:	6021      	streq	r1, [r4, #0]
 8000de8:	e7ed      	b.n	8000dc6 <_free_r+0x1e>
 8000dea:	461a      	mov	r2, r3
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	b10b      	cbz	r3, 8000df4 <_free_r+0x4c>
 8000df0:	42a3      	cmp	r3, r4
 8000df2:	d9fa      	bls.n	8000dea <_free_r+0x42>
 8000df4:	6811      	ldr	r1, [r2, #0]
 8000df6:	1850      	adds	r0, r2, r1
 8000df8:	42a0      	cmp	r0, r4
 8000dfa:	d10b      	bne.n	8000e14 <_free_r+0x6c>
 8000dfc:	6820      	ldr	r0, [r4, #0]
 8000dfe:	4401      	add	r1, r0
 8000e00:	1850      	adds	r0, r2, r1
 8000e02:	4283      	cmp	r3, r0
 8000e04:	6011      	str	r1, [r2, #0]
 8000e06:	d1e0      	bne.n	8000dca <_free_r+0x22>
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	6053      	str	r3, [r2, #4]
 8000e0e:	4408      	add	r0, r1
 8000e10:	6010      	str	r0, [r2, #0]
 8000e12:	e7da      	b.n	8000dca <_free_r+0x22>
 8000e14:	d902      	bls.n	8000e1c <_free_r+0x74>
 8000e16:	230c      	movs	r3, #12
 8000e18:	602b      	str	r3, [r5, #0]
 8000e1a:	e7d6      	b.n	8000dca <_free_r+0x22>
 8000e1c:	6820      	ldr	r0, [r4, #0]
 8000e1e:	1821      	adds	r1, r4, r0
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf04      	itt	eq
 8000e24:	6819      	ldreq	r1, [r3, #0]
 8000e26:	685b      	ldreq	r3, [r3, #4]
 8000e28:	6063      	str	r3, [r4, #4]
 8000e2a:	bf04      	itt	eq
 8000e2c:	1809      	addeq	r1, r1, r0
 8000e2e:	6021      	streq	r1, [r4, #0]
 8000e30:	6054      	str	r4, [r2, #4]
 8000e32:	e7ca      	b.n	8000dca <_free_r+0x22>
 8000e34:	bd38      	pop	{r3, r4, r5, pc}
 8000e36:	bf00      	nop
 8000e38:	200001b8 	.word	0x200001b8

08000e3c <sbrk_aligned>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8000e7c <sbrk_aligned+0x40>)
 8000e40:	460c      	mov	r4, r1
 8000e42:	6831      	ldr	r1, [r6, #0]
 8000e44:	4605      	mov	r5, r0
 8000e46:	b911      	cbnz	r1, 8000e4e <sbrk_aligned+0x12>
 8000e48:	f000 fba6 	bl	8001598 <_sbrk_r>
 8000e4c:	6030      	str	r0, [r6, #0]
 8000e4e:	4621      	mov	r1, r4
 8000e50:	4628      	mov	r0, r5
 8000e52:	f000 fba1 	bl	8001598 <_sbrk_r>
 8000e56:	1c43      	adds	r3, r0, #1
 8000e58:	d103      	bne.n	8000e62 <sbrk_aligned+0x26>
 8000e5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000e5e:	4620      	mov	r0, r4
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	1cc4      	adds	r4, r0, #3
 8000e64:	f024 0403 	bic.w	r4, r4, #3
 8000e68:	42a0      	cmp	r0, r4
 8000e6a:	d0f8      	beq.n	8000e5e <sbrk_aligned+0x22>
 8000e6c:	1a21      	subs	r1, r4, r0
 8000e6e:	4628      	mov	r0, r5
 8000e70:	f000 fb92 	bl	8001598 <_sbrk_r>
 8000e74:	3001      	adds	r0, #1
 8000e76:	d1f2      	bne.n	8000e5e <sbrk_aligned+0x22>
 8000e78:	e7ef      	b.n	8000e5a <sbrk_aligned+0x1e>
 8000e7a:	bf00      	nop
 8000e7c:	200001b4 	.word	0x200001b4

08000e80 <_malloc_r>:
 8000e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e84:	1ccd      	adds	r5, r1, #3
 8000e86:	f025 0503 	bic.w	r5, r5, #3
 8000e8a:	3508      	adds	r5, #8
 8000e8c:	2d0c      	cmp	r5, #12
 8000e8e:	bf38      	it	cc
 8000e90:	250c      	movcc	r5, #12
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	4606      	mov	r6, r0
 8000e96:	db01      	blt.n	8000e9c <_malloc_r+0x1c>
 8000e98:	42a9      	cmp	r1, r5
 8000e9a:	d904      	bls.n	8000ea6 <_malloc_r+0x26>
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	6033      	str	r3, [r6, #0]
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f7c <_malloc_r+0xfc>
 8000eaa:	f000 f869 	bl	8000f80 <__malloc_lock>
 8000eae:	f8d8 3000 	ldr.w	r3, [r8]
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	bb44      	cbnz	r4, 8000f08 <_malloc_r+0x88>
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4630      	mov	r0, r6
 8000eba:	f7ff ffbf 	bl	8000e3c <sbrk_aligned>
 8000ebe:	1c43      	adds	r3, r0, #1
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	d158      	bne.n	8000f76 <_malloc_r+0xf6>
 8000ec4:	f8d8 4000 	ldr.w	r4, [r8]
 8000ec8:	4627      	mov	r7, r4
 8000eca:	2f00      	cmp	r7, #0
 8000ecc:	d143      	bne.n	8000f56 <_malloc_r+0xd6>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d04b      	beq.n	8000f6a <_malloc_r+0xea>
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	4639      	mov	r1, r7
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	eb04 0903 	add.w	r9, r4, r3
 8000edc:	f000 fb5c 	bl	8001598 <_sbrk_r>
 8000ee0:	4581      	cmp	r9, r0
 8000ee2:	d142      	bne.n	8000f6a <_malloc_r+0xea>
 8000ee4:	6821      	ldr	r1, [r4, #0]
 8000ee6:	1a6d      	subs	r5, r5, r1
 8000ee8:	4629      	mov	r1, r5
 8000eea:	4630      	mov	r0, r6
 8000eec:	f7ff ffa6 	bl	8000e3c <sbrk_aligned>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d03a      	beq.n	8000f6a <_malloc_r+0xea>
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	442b      	add	r3, r5
 8000ef8:	6023      	str	r3, [r4, #0]
 8000efa:	f8d8 3000 	ldr.w	r3, [r8]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	bb62      	cbnz	r2, 8000f5c <_malloc_r+0xdc>
 8000f02:	f8c8 7000 	str.w	r7, [r8]
 8000f06:	e00f      	b.n	8000f28 <_malloc_r+0xa8>
 8000f08:	6822      	ldr	r2, [r4, #0]
 8000f0a:	1b52      	subs	r2, r2, r5
 8000f0c:	d420      	bmi.n	8000f50 <_malloc_r+0xd0>
 8000f0e:	2a0b      	cmp	r2, #11
 8000f10:	d917      	bls.n	8000f42 <_malloc_r+0xc2>
 8000f12:	1961      	adds	r1, r4, r5
 8000f14:	42a3      	cmp	r3, r4
 8000f16:	6025      	str	r5, [r4, #0]
 8000f18:	bf18      	it	ne
 8000f1a:	6059      	strne	r1, [r3, #4]
 8000f1c:	6863      	ldr	r3, [r4, #4]
 8000f1e:	bf08      	it	eq
 8000f20:	f8c8 1000 	streq.w	r1, [r8]
 8000f24:	5162      	str	r2, [r4, r5]
 8000f26:	604b      	str	r3, [r1, #4]
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f000 f82f 	bl	8000f8c <__malloc_unlock>
 8000f2e:	f104 000b 	add.w	r0, r4, #11
 8000f32:	1d23      	adds	r3, r4, #4
 8000f34:	f020 0007 	bic.w	r0, r0, #7
 8000f38:	1ac2      	subs	r2, r0, r3
 8000f3a:	bf1c      	itt	ne
 8000f3c:	1a1b      	subne	r3, r3, r0
 8000f3e:	50a3      	strne	r3, [r4, r2]
 8000f40:	e7af      	b.n	8000ea2 <_malloc_r+0x22>
 8000f42:	6862      	ldr	r2, [r4, #4]
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	bf0c      	ite	eq
 8000f48:	f8c8 2000 	streq.w	r2, [r8]
 8000f4c:	605a      	strne	r2, [r3, #4]
 8000f4e:	e7eb      	b.n	8000f28 <_malloc_r+0xa8>
 8000f50:	4623      	mov	r3, r4
 8000f52:	6864      	ldr	r4, [r4, #4]
 8000f54:	e7ae      	b.n	8000eb4 <_malloc_r+0x34>
 8000f56:	463c      	mov	r4, r7
 8000f58:	687f      	ldr	r7, [r7, #4]
 8000f5a:	e7b6      	b.n	8000eca <_malloc_r+0x4a>
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	42a3      	cmp	r3, r4
 8000f62:	d1fb      	bne.n	8000f5c <_malloc_r+0xdc>
 8000f64:	2300      	movs	r3, #0
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	e7de      	b.n	8000f28 <_malloc_r+0xa8>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	6033      	str	r3, [r6, #0]
 8000f6e:	4630      	mov	r0, r6
 8000f70:	f000 f80c 	bl	8000f8c <__malloc_unlock>
 8000f74:	e794      	b.n	8000ea0 <_malloc_r+0x20>
 8000f76:	6005      	str	r5, [r0, #0]
 8000f78:	e7d6      	b.n	8000f28 <_malloc_r+0xa8>
 8000f7a:	bf00      	nop
 8000f7c:	200001b8 	.word	0x200001b8

08000f80 <__malloc_lock>:
 8000f80:	4801      	ldr	r0, [pc, #4]	@ (8000f88 <__malloc_lock+0x8>)
 8000f82:	f7ff bf0f 	b.w	8000da4 <__retarget_lock_acquire_recursive>
 8000f86:	bf00      	nop
 8000f88:	200001b0 	.word	0x200001b0

08000f8c <__malloc_unlock>:
 8000f8c:	4801      	ldr	r0, [pc, #4]	@ (8000f94 <__malloc_unlock+0x8>)
 8000f8e:	f7ff bf0a 	b.w	8000da6 <__retarget_lock_release_recursive>
 8000f92:	bf00      	nop
 8000f94:	200001b0 	.word	0x200001b0

08000f98 <__ssputs_r>:
 8000f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f9c:	688e      	ldr	r6, [r1, #8]
 8000f9e:	461f      	mov	r7, r3
 8000fa0:	42be      	cmp	r6, r7
 8000fa2:	680b      	ldr	r3, [r1, #0]
 8000fa4:	4682      	mov	sl, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	4690      	mov	r8, r2
 8000faa:	d82d      	bhi.n	8001008 <__ssputs_r+0x70>
 8000fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000fb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000fb4:	d026      	beq.n	8001004 <__ssputs_r+0x6c>
 8000fb6:	6965      	ldr	r5, [r4, #20]
 8000fb8:	6909      	ldr	r1, [r1, #16]
 8000fba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000fbe:	eba3 0901 	sub.w	r9, r3, r1
 8000fc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000fc6:	1c7b      	adds	r3, r7, #1
 8000fc8:	444b      	add	r3, r9
 8000fca:	106d      	asrs	r5, r5, #1
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	bf38      	it	cc
 8000fd0:	461d      	movcc	r5, r3
 8000fd2:	0553      	lsls	r3, r2, #21
 8000fd4:	d527      	bpl.n	8001026 <__ssputs_r+0x8e>
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f7ff ff52 	bl	8000e80 <_malloc_r>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	b360      	cbz	r0, 800103a <__ssputs_r+0xa2>
 8000fe0:	6921      	ldr	r1, [r4, #16]
 8000fe2:	464a      	mov	r2, r9
 8000fe4:	f000 fae8 	bl	80015b8 <memcpy>
 8000fe8:	89a3      	ldrh	r3, [r4, #12]
 8000fea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff2:	81a3      	strh	r3, [r4, #12]
 8000ff4:	6126      	str	r6, [r4, #16]
 8000ff6:	6165      	str	r5, [r4, #20]
 8000ff8:	444e      	add	r6, r9
 8000ffa:	eba5 0509 	sub.w	r5, r5, r9
 8000ffe:	6026      	str	r6, [r4, #0]
 8001000:	60a5      	str	r5, [r4, #8]
 8001002:	463e      	mov	r6, r7
 8001004:	42be      	cmp	r6, r7
 8001006:	d900      	bls.n	800100a <__ssputs_r+0x72>
 8001008:	463e      	mov	r6, r7
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	4632      	mov	r2, r6
 800100e:	4641      	mov	r1, r8
 8001010:	f000 faa8 	bl	8001564 <memmove>
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	1b9b      	subs	r3, r3, r6
 8001018:	60a3      	str	r3, [r4, #8]
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	4433      	add	r3, r6
 800101e:	6023      	str	r3, [r4, #0]
 8001020:	2000      	movs	r0, #0
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	462a      	mov	r2, r5
 8001028:	f000 fad4 	bl	80015d4 <_realloc_r>
 800102c:	4606      	mov	r6, r0
 800102e:	2800      	cmp	r0, #0
 8001030:	d1e0      	bne.n	8000ff4 <__ssputs_r+0x5c>
 8001032:	6921      	ldr	r1, [r4, #16]
 8001034:	4650      	mov	r0, sl
 8001036:	f7ff feb7 	bl	8000da8 <_free_r>
 800103a:	230c      	movs	r3, #12
 800103c:	f8ca 3000 	str.w	r3, [sl]
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001046:	81a3      	strh	r3, [r4, #12]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800104c:	e7e9      	b.n	8001022 <__ssputs_r+0x8a>
	...

08001050 <_svfiprintf_r>:
 8001050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001054:	4698      	mov	r8, r3
 8001056:	898b      	ldrh	r3, [r1, #12]
 8001058:	061b      	lsls	r3, r3, #24
 800105a:	b09d      	sub	sp, #116	@ 0x74
 800105c:	4607      	mov	r7, r0
 800105e:	460d      	mov	r5, r1
 8001060:	4614      	mov	r4, r2
 8001062:	d510      	bpl.n	8001086 <_svfiprintf_r+0x36>
 8001064:	690b      	ldr	r3, [r1, #16]
 8001066:	b973      	cbnz	r3, 8001086 <_svfiprintf_r+0x36>
 8001068:	2140      	movs	r1, #64	@ 0x40
 800106a:	f7ff ff09 	bl	8000e80 <_malloc_r>
 800106e:	6028      	str	r0, [r5, #0]
 8001070:	6128      	str	r0, [r5, #16]
 8001072:	b930      	cbnz	r0, 8001082 <_svfiprintf_r+0x32>
 8001074:	230c      	movs	r3, #12
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800107c:	b01d      	add	sp, #116	@ 0x74
 800107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001082:	2340      	movs	r3, #64	@ 0x40
 8001084:	616b      	str	r3, [r5, #20]
 8001086:	2300      	movs	r3, #0
 8001088:	9309      	str	r3, [sp, #36]	@ 0x24
 800108a:	2320      	movs	r3, #32
 800108c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001090:	f8cd 800c 	str.w	r8, [sp, #12]
 8001094:	2330      	movs	r3, #48	@ 0x30
 8001096:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001234 <_svfiprintf_r+0x1e4>
 800109a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800109e:	f04f 0901 	mov.w	r9, #1
 80010a2:	4623      	mov	r3, r4
 80010a4:	469a      	mov	sl, r3
 80010a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010aa:	b10a      	cbz	r2, 80010b0 <_svfiprintf_r+0x60>
 80010ac:	2a25      	cmp	r2, #37	@ 0x25
 80010ae:	d1f9      	bne.n	80010a4 <_svfiprintf_r+0x54>
 80010b0:	ebba 0b04 	subs.w	fp, sl, r4
 80010b4:	d00b      	beq.n	80010ce <_svfiprintf_r+0x7e>
 80010b6:	465b      	mov	r3, fp
 80010b8:	4622      	mov	r2, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	4638      	mov	r0, r7
 80010be:	f7ff ff6b 	bl	8000f98 <__ssputs_r>
 80010c2:	3001      	adds	r0, #1
 80010c4:	f000 80a7 	beq.w	8001216 <_svfiprintf_r+0x1c6>
 80010c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80010ca:	445a      	add	r2, fp
 80010cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80010ce:	f89a 3000 	ldrb.w	r3, [sl]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 809f 	beq.w	8001216 <_svfiprintf_r+0x1c6>
 80010d8:	2300      	movs	r3, #0
 80010da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010e2:	f10a 0a01 	add.w	sl, sl, #1
 80010e6:	9304      	str	r3, [sp, #16]
 80010e8:	9307      	str	r3, [sp, #28]
 80010ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80010ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80010f0:	4654      	mov	r4, sl
 80010f2:	2205      	movs	r2, #5
 80010f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010f8:	484e      	ldr	r0, [pc, #312]	@ (8001234 <_svfiprintf_r+0x1e4>)
 80010fa:	f7ff f869 	bl	80001d0 <memchr>
 80010fe:	9a04      	ldr	r2, [sp, #16]
 8001100:	b9d8      	cbnz	r0, 800113a <_svfiprintf_r+0xea>
 8001102:	06d0      	lsls	r0, r2, #27
 8001104:	bf44      	itt	mi
 8001106:	2320      	movmi	r3, #32
 8001108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800110c:	0711      	lsls	r1, r2, #28
 800110e:	bf44      	itt	mi
 8001110:	232b      	movmi	r3, #43	@ 0x2b
 8001112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001116:	f89a 3000 	ldrb.w	r3, [sl]
 800111a:	2b2a      	cmp	r3, #42	@ 0x2a
 800111c:	d015      	beq.n	800114a <_svfiprintf_r+0xfa>
 800111e:	9a07      	ldr	r2, [sp, #28]
 8001120:	4654      	mov	r4, sl
 8001122:	2000      	movs	r0, #0
 8001124:	f04f 0c0a 	mov.w	ip, #10
 8001128:	4621      	mov	r1, r4
 800112a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800112e:	3b30      	subs	r3, #48	@ 0x30
 8001130:	2b09      	cmp	r3, #9
 8001132:	d94b      	bls.n	80011cc <_svfiprintf_r+0x17c>
 8001134:	b1b0      	cbz	r0, 8001164 <_svfiprintf_r+0x114>
 8001136:	9207      	str	r2, [sp, #28]
 8001138:	e014      	b.n	8001164 <_svfiprintf_r+0x114>
 800113a:	eba0 0308 	sub.w	r3, r0, r8
 800113e:	fa09 f303 	lsl.w	r3, r9, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	9304      	str	r3, [sp, #16]
 8001146:	46a2      	mov	sl, r4
 8001148:	e7d2      	b.n	80010f0 <_svfiprintf_r+0xa0>
 800114a:	9b03      	ldr	r3, [sp, #12]
 800114c:	1d19      	adds	r1, r3, #4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	9103      	str	r1, [sp, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfbb      	ittet	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	f042 0202 	orrlt.w	r2, r2, #2
 800115c:	9307      	strge	r3, [sp, #28]
 800115e:	9307      	strlt	r3, [sp, #28]
 8001160:	bfb8      	it	lt
 8001162:	9204      	strlt	r2, [sp, #16]
 8001164:	7823      	ldrb	r3, [r4, #0]
 8001166:	2b2e      	cmp	r3, #46	@ 0x2e
 8001168:	d10a      	bne.n	8001180 <_svfiprintf_r+0x130>
 800116a:	7863      	ldrb	r3, [r4, #1]
 800116c:	2b2a      	cmp	r3, #42	@ 0x2a
 800116e:	d132      	bne.n	80011d6 <_svfiprintf_r+0x186>
 8001170:	9b03      	ldr	r3, [sp, #12]
 8001172:	1d1a      	adds	r2, r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	9203      	str	r2, [sp, #12]
 8001178:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800117c:	3402      	adds	r4, #2
 800117e:	9305      	str	r3, [sp, #20]
 8001180:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001238 <_svfiprintf_r+0x1e8>
 8001184:	7821      	ldrb	r1, [r4, #0]
 8001186:	2203      	movs	r2, #3
 8001188:	4650      	mov	r0, sl
 800118a:	f7ff f821 	bl	80001d0 <memchr>
 800118e:	b138      	cbz	r0, 80011a0 <_svfiprintf_r+0x150>
 8001190:	9b04      	ldr	r3, [sp, #16]
 8001192:	eba0 000a 	sub.w	r0, r0, sl
 8001196:	2240      	movs	r2, #64	@ 0x40
 8001198:	4082      	lsls	r2, r0
 800119a:	4313      	orrs	r3, r2
 800119c:	3401      	adds	r4, #1
 800119e:	9304      	str	r3, [sp, #16]
 80011a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011a4:	4825      	ldr	r0, [pc, #148]	@ (800123c <_svfiprintf_r+0x1ec>)
 80011a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80011aa:	2206      	movs	r2, #6
 80011ac:	f7ff f810 	bl	80001d0 <memchr>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d036      	beq.n	8001222 <_svfiprintf_r+0x1d2>
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <_svfiprintf_r+0x1f0>)
 80011b6:	bb1b      	cbnz	r3, 8001200 <_svfiprintf_r+0x1b0>
 80011b8:	9b03      	ldr	r3, [sp, #12]
 80011ba:	3307      	adds	r3, #7
 80011bc:	f023 0307 	bic.w	r3, r3, #7
 80011c0:	3308      	adds	r3, #8
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80011c6:	4433      	add	r3, r6
 80011c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80011ca:	e76a      	b.n	80010a2 <_svfiprintf_r+0x52>
 80011cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80011d0:	460c      	mov	r4, r1
 80011d2:	2001      	movs	r0, #1
 80011d4:	e7a8      	b.n	8001128 <_svfiprintf_r+0xd8>
 80011d6:	2300      	movs	r3, #0
 80011d8:	3401      	adds	r4, #1
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0c0a 	mov.w	ip, #10
 80011e2:	4620      	mov	r0, r4
 80011e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011e8:	3a30      	subs	r2, #48	@ 0x30
 80011ea:	2a09      	cmp	r2, #9
 80011ec:	d903      	bls.n	80011f6 <_svfiprintf_r+0x1a6>
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0c6      	beq.n	8001180 <_svfiprintf_r+0x130>
 80011f2:	9105      	str	r1, [sp, #20]
 80011f4:	e7c4      	b.n	8001180 <_svfiprintf_r+0x130>
 80011f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80011fa:	4604      	mov	r4, r0
 80011fc:	2301      	movs	r3, #1
 80011fe:	e7f0      	b.n	80011e2 <_svfiprintf_r+0x192>
 8001200:	ab03      	add	r3, sp, #12
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	462a      	mov	r2, r5
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <_svfiprintf_r+0x1f4>)
 8001208:	a904      	add	r1, sp, #16
 800120a:	4638      	mov	r0, r7
 800120c:	f3af 8000 	nop.w
 8001210:	1c42      	adds	r2, r0, #1
 8001212:	4606      	mov	r6, r0
 8001214:	d1d6      	bne.n	80011c4 <_svfiprintf_r+0x174>
 8001216:	89ab      	ldrh	r3, [r5, #12]
 8001218:	065b      	lsls	r3, r3, #25
 800121a:	f53f af2d 	bmi.w	8001078 <_svfiprintf_r+0x28>
 800121e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001220:	e72c      	b.n	800107c <_svfiprintf_r+0x2c>
 8001222:	ab03      	add	r3, sp, #12
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	462a      	mov	r2, r5
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <_svfiprintf_r+0x1f4>)
 800122a:	a904      	add	r1, sp, #16
 800122c:	4638      	mov	r0, r7
 800122e:	f000 f879 	bl	8001324 <_printf_i>
 8001232:	e7ed      	b.n	8001210 <_svfiprintf_r+0x1c0>
 8001234:	0800166f 	.word	0x0800166f
 8001238:	08001675 	.word	0x08001675
 800123c:	08001679 	.word	0x08001679
 8001240:	00000000 	.word	0x00000000
 8001244:	08000f99 	.word	0x08000f99

08001248 <_printf_common>:
 8001248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124c:	4616      	mov	r6, r2
 800124e:	4698      	mov	r8, r3
 8001250:	688a      	ldr	r2, [r1, #8]
 8001252:	690b      	ldr	r3, [r1, #16]
 8001254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001258:	4293      	cmp	r3, r2
 800125a:	bfb8      	it	lt
 800125c:	4613      	movlt	r3, r2
 800125e:	6033      	str	r3, [r6, #0]
 8001260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001264:	4607      	mov	r7, r0
 8001266:	460c      	mov	r4, r1
 8001268:	b10a      	cbz	r2, 800126e <_printf_common+0x26>
 800126a:	3301      	adds	r3, #1
 800126c:	6033      	str	r3, [r6, #0]
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	0699      	lsls	r1, r3, #26
 8001272:	bf42      	ittt	mi
 8001274:	6833      	ldrmi	r3, [r6, #0]
 8001276:	3302      	addmi	r3, #2
 8001278:	6033      	strmi	r3, [r6, #0]
 800127a:	6825      	ldr	r5, [r4, #0]
 800127c:	f015 0506 	ands.w	r5, r5, #6
 8001280:	d106      	bne.n	8001290 <_printf_common+0x48>
 8001282:	f104 0a19 	add.w	sl, r4, #25
 8001286:	68e3      	ldr	r3, [r4, #12]
 8001288:	6832      	ldr	r2, [r6, #0]
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	42ab      	cmp	r3, r5
 800128e:	dc26      	bgt.n	80012de <_printf_common+0x96>
 8001290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	3b00      	subs	r3, #0
 8001298:	bf18      	it	ne
 800129a:	2301      	movne	r3, #1
 800129c:	0692      	lsls	r2, r2, #26
 800129e:	d42b      	bmi.n	80012f8 <_printf_common+0xb0>
 80012a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80012a4:	4641      	mov	r1, r8
 80012a6:	4638      	mov	r0, r7
 80012a8:	47c8      	blx	r9
 80012aa:	3001      	adds	r0, #1
 80012ac:	d01e      	beq.n	80012ec <_printf_common+0xa4>
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	6922      	ldr	r2, [r4, #16]
 80012b2:	f003 0306 	and.w	r3, r3, #6
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf02      	ittt	eq
 80012ba:	68e5      	ldreq	r5, [r4, #12]
 80012bc:	6833      	ldreq	r3, [r6, #0]
 80012be:	1aed      	subeq	r5, r5, r3
 80012c0:	68a3      	ldr	r3, [r4, #8]
 80012c2:	bf0c      	ite	eq
 80012c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012c8:	2500      	movne	r5, #0
 80012ca:	4293      	cmp	r3, r2
 80012cc:	bfc4      	itt	gt
 80012ce:	1a9b      	subgt	r3, r3, r2
 80012d0:	18ed      	addgt	r5, r5, r3
 80012d2:	2600      	movs	r6, #0
 80012d4:	341a      	adds	r4, #26
 80012d6:	42b5      	cmp	r5, r6
 80012d8:	d11a      	bne.n	8001310 <_printf_common+0xc8>
 80012da:	2000      	movs	r0, #0
 80012dc:	e008      	b.n	80012f0 <_printf_common+0xa8>
 80012de:	2301      	movs	r3, #1
 80012e0:	4652      	mov	r2, sl
 80012e2:	4641      	mov	r1, r8
 80012e4:	4638      	mov	r0, r7
 80012e6:	47c8      	blx	r9
 80012e8:	3001      	adds	r0, #1
 80012ea:	d103      	bne.n	80012f4 <_printf_common+0xac>
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f4:	3501      	adds	r5, #1
 80012f6:	e7c6      	b.n	8001286 <_printf_common+0x3e>
 80012f8:	18e1      	adds	r1, r4, r3
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	2030      	movs	r0, #48	@ 0x30
 80012fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001302:	4422      	add	r2, r4
 8001304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800130c:	3302      	adds	r3, #2
 800130e:	e7c7      	b.n	80012a0 <_printf_common+0x58>
 8001310:	2301      	movs	r3, #1
 8001312:	4622      	mov	r2, r4
 8001314:	4641      	mov	r1, r8
 8001316:	4638      	mov	r0, r7
 8001318:	47c8      	blx	r9
 800131a:	3001      	adds	r0, #1
 800131c:	d0e6      	beq.n	80012ec <_printf_common+0xa4>
 800131e:	3601      	adds	r6, #1
 8001320:	e7d9      	b.n	80012d6 <_printf_common+0x8e>
	...

08001324 <_printf_i>:
 8001324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001328:	7e0f      	ldrb	r7, [r1, #24]
 800132a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800132c:	2f78      	cmp	r7, #120	@ 0x78
 800132e:	4691      	mov	r9, r2
 8001330:	4680      	mov	r8, r0
 8001332:	460c      	mov	r4, r1
 8001334:	469a      	mov	sl, r3
 8001336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800133a:	d807      	bhi.n	800134c <_printf_i+0x28>
 800133c:	2f62      	cmp	r7, #98	@ 0x62
 800133e:	d80a      	bhi.n	8001356 <_printf_i+0x32>
 8001340:	2f00      	cmp	r7, #0
 8001342:	f000 80d2 	beq.w	80014ea <_printf_i+0x1c6>
 8001346:	2f58      	cmp	r7, #88	@ 0x58
 8001348:	f000 80b9 	beq.w	80014be <_printf_i+0x19a>
 800134c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001354:	e03a      	b.n	80013cc <_printf_i+0xa8>
 8001356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800135a:	2b15      	cmp	r3, #21
 800135c:	d8f6      	bhi.n	800134c <_printf_i+0x28>
 800135e:	a101      	add	r1, pc, #4	@ (adr r1, 8001364 <_printf_i+0x40>)
 8001360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001364:	080013bd 	.word	0x080013bd
 8001368:	080013d1 	.word	0x080013d1
 800136c:	0800134d 	.word	0x0800134d
 8001370:	0800134d 	.word	0x0800134d
 8001374:	0800134d 	.word	0x0800134d
 8001378:	0800134d 	.word	0x0800134d
 800137c:	080013d1 	.word	0x080013d1
 8001380:	0800134d 	.word	0x0800134d
 8001384:	0800134d 	.word	0x0800134d
 8001388:	0800134d 	.word	0x0800134d
 800138c:	0800134d 	.word	0x0800134d
 8001390:	080014d1 	.word	0x080014d1
 8001394:	080013fb 	.word	0x080013fb
 8001398:	0800148b 	.word	0x0800148b
 800139c:	0800134d 	.word	0x0800134d
 80013a0:	0800134d 	.word	0x0800134d
 80013a4:	080014f3 	.word	0x080014f3
 80013a8:	0800134d 	.word	0x0800134d
 80013ac:	080013fb 	.word	0x080013fb
 80013b0:	0800134d 	.word	0x0800134d
 80013b4:	0800134d 	.word	0x0800134d
 80013b8:	08001493 	.word	0x08001493
 80013bc:	6833      	ldr	r3, [r6, #0]
 80013be:	1d1a      	adds	r2, r3, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6032      	str	r2, [r6, #0]
 80013c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013cc:	2301      	movs	r3, #1
 80013ce:	e09d      	b.n	800150c <_printf_i+0x1e8>
 80013d0:	6833      	ldr	r3, [r6, #0]
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	1d19      	adds	r1, r3, #4
 80013d6:	6031      	str	r1, [r6, #0]
 80013d8:	0606      	lsls	r6, r0, #24
 80013da:	d501      	bpl.n	80013e0 <_printf_i+0xbc>
 80013dc:	681d      	ldr	r5, [r3, #0]
 80013de:	e003      	b.n	80013e8 <_printf_i+0xc4>
 80013e0:	0645      	lsls	r5, r0, #25
 80013e2:	d5fb      	bpl.n	80013dc <_printf_i+0xb8>
 80013e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	da03      	bge.n	80013f4 <_printf_i+0xd0>
 80013ec:	232d      	movs	r3, #45	@ 0x2d
 80013ee:	426d      	negs	r5, r5
 80013f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013f4:	4859      	ldr	r0, [pc, #356]	@ (800155c <_printf_i+0x238>)
 80013f6:	230a      	movs	r3, #10
 80013f8:	e011      	b.n	800141e <_printf_i+0xfa>
 80013fa:	6821      	ldr	r1, [r4, #0]
 80013fc:	6833      	ldr	r3, [r6, #0]
 80013fe:	0608      	lsls	r0, r1, #24
 8001400:	f853 5b04 	ldr.w	r5, [r3], #4
 8001404:	d402      	bmi.n	800140c <_printf_i+0xe8>
 8001406:	0649      	lsls	r1, r1, #25
 8001408:	bf48      	it	mi
 800140a:	b2ad      	uxthmi	r5, r5
 800140c:	2f6f      	cmp	r7, #111	@ 0x6f
 800140e:	4853      	ldr	r0, [pc, #332]	@ (800155c <_printf_i+0x238>)
 8001410:	6033      	str	r3, [r6, #0]
 8001412:	bf14      	ite	ne
 8001414:	230a      	movne	r3, #10
 8001416:	2308      	moveq	r3, #8
 8001418:	2100      	movs	r1, #0
 800141a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800141e:	6866      	ldr	r6, [r4, #4]
 8001420:	60a6      	str	r6, [r4, #8]
 8001422:	2e00      	cmp	r6, #0
 8001424:	bfa2      	ittt	ge
 8001426:	6821      	ldrge	r1, [r4, #0]
 8001428:	f021 0104 	bicge.w	r1, r1, #4
 800142c:	6021      	strge	r1, [r4, #0]
 800142e:	b90d      	cbnz	r5, 8001434 <_printf_i+0x110>
 8001430:	2e00      	cmp	r6, #0
 8001432:	d04b      	beq.n	80014cc <_printf_i+0x1a8>
 8001434:	4616      	mov	r6, r2
 8001436:	fbb5 f1f3 	udiv	r1, r5, r3
 800143a:	fb03 5711 	mls	r7, r3, r1, r5
 800143e:	5dc7      	ldrb	r7, [r0, r7]
 8001440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001444:	462f      	mov	r7, r5
 8001446:	42bb      	cmp	r3, r7
 8001448:	460d      	mov	r5, r1
 800144a:	d9f4      	bls.n	8001436 <_printf_i+0x112>
 800144c:	2b08      	cmp	r3, #8
 800144e:	d10b      	bne.n	8001468 <_printf_i+0x144>
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	07df      	lsls	r7, r3, #31
 8001454:	d508      	bpl.n	8001468 <_printf_i+0x144>
 8001456:	6923      	ldr	r3, [r4, #16]
 8001458:	6861      	ldr	r1, [r4, #4]
 800145a:	4299      	cmp	r1, r3
 800145c:	bfde      	ittt	le
 800145e:	2330      	movle	r3, #48	@ 0x30
 8001460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001464:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001468:	1b92      	subs	r2, r2, r6
 800146a:	6122      	str	r2, [r4, #16]
 800146c:	f8cd a000 	str.w	sl, [sp]
 8001470:	464b      	mov	r3, r9
 8001472:	aa03      	add	r2, sp, #12
 8001474:	4621      	mov	r1, r4
 8001476:	4640      	mov	r0, r8
 8001478:	f7ff fee6 	bl	8001248 <_printf_common>
 800147c:	3001      	adds	r0, #1
 800147e:	d14a      	bne.n	8001516 <_printf_i+0x1f2>
 8001480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001484:	b004      	add	sp, #16
 8001486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	6023      	str	r3, [r4, #0]
 8001492:	4833      	ldr	r0, [pc, #204]	@ (8001560 <_printf_i+0x23c>)
 8001494:	2778      	movs	r7, #120	@ 0x78
 8001496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	6831      	ldr	r1, [r6, #0]
 800149e:	061f      	lsls	r7, r3, #24
 80014a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80014a4:	d402      	bmi.n	80014ac <_printf_i+0x188>
 80014a6:	065f      	lsls	r7, r3, #25
 80014a8:	bf48      	it	mi
 80014aa:	b2ad      	uxthmi	r5, r5
 80014ac:	6031      	str	r1, [r6, #0]
 80014ae:	07d9      	lsls	r1, r3, #31
 80014b0:	bf44      	itt	mi
 80014b2:	f043 0320 	orrmi.w	r3, r3, #32
 80014b6:	6023      	strmi	r3, [r4, #0]
 80014b8:	b11d      	cbz	r5, 80014c2 <_printf_i+0x19e>
 80014ba:	2310      	movs	r3, #16
 80014bc:	e7ac      	b.n	8001418 <_printf_i+0xf4>
 80014be:	4827      	ldr	r0, [pc, #156]	@ (800155c <_printf_i+0x238>)
 80014c0:	e7e9      	b.n	8001496 <_printf_i+0x172>
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	f023 0320 	bic.w	r3, r3, #32
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	e7f6      	b.n	80014ba <_printf_i+0x196>
 80014cc:	4616      	mov	r6, r2
 80014ce:	e7bd      	b.n	800144c <_printf_i+0x128>
 80014d0:	6833      	ldr	r3, [r6, #0]
 80014d2:	6825      	ldr	r5, [r4, #0]
 80014d4:	6961      	ldr	r1, [r4, #20]
 80014d6:	1d18      	adds	r0, r3, #4
 80014d8:	6030      	str	r0, [r6, #0]
 80014da:	062e      	lsls	r6, r5, #24
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	d501      	bpl.n	80014e4 <_printf_i+0x1c0>
 80014e0:	6019      	str	r1, [r3, #0]
 80014e2:	e002      	b.n	80014ea <_printf_i+0x1c6>
 80014e4:	0668      	lsls	r0, r5, #25
 80014e6:	d5fb      	bpl.n	80014e0 <_printf_i+0x1bc>
 80014e8:	8019      	strh	r1, [r3, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	6123      	str	r3, [r4, #16]
 80014ee:	4616      	mov	r6, r2
 80014f0:	e7bc      	b.n	800146c <_printf_i+0x148>
 80014f2:	6833      	ldr	r3, [r6, #0]
 80014f4:	1d1a      	adds	r2, r3, #4
 80014f6:	6032      	str	r2, [r6, #0]
 80014f8:	681e      	ldr	r6, [r3, #0]
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	2100      	movs	r1, #0
 80014fe:	4630      	mov	r0, r6
 8001500:	f7fe fe66 	bl	80001d0 <memchr>
 8001504:	b108      	cbz	r0, 800150a <_printf_i+0x1e6>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	6060      	str	r0, [r4, #4]
 800150a:	6863      	ldr	r3, [r4, #4]
 800150c:	6123      	str	r3, [r4, #16]
 800150e:	2300      	movs	r3, #0
 8001510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001514:	e7aa      	b.n	800146c <_printf_i+0x148>
 8001516:	6923      	ldr	r3, [r4, #16]
 8001518:	4632      	mov	r2, r6
 800151a:	4649      	mov	r1, r9
 800151c:	4640      	mov	r0, r8
 800151e:	47d0      	blx	sl
 8001520:	3001      	adds	r0, #1
 8001522:	d0ad      	beq.n	8001480 <_printf_i+0x15c>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	079b      	lsls	r3, r3, #30
 8001528:	d413      	bmi.n	8001552 <_printf_i+0x22e>
 800152a:	68e0      	ldr	r0, [r4, #12]
 800152c:	9b03      	ldr	r3, [sp, #12]
 800152e:	4298      	cmp	r0, r3
 8001530:	bfb8      	it	lt
 8001532:	4618      	movlt	r0, r3
 8001534:	e7a6      	b.n	8001484 <_printf_i+0x160>
 8001536:	2301      	movs	r3, #1
 8001538:	4632      	mov	r2, r6
 800153a:	4649      	mov	r1, r9
 800153c:	4640      	mov	r0, r8
 800153e:	47d0      	blx	sl
 8001540:	3001      	adds	r0, #1
 8001542:	d09d      	beq.n	8001480 <_printf_i+0x15c>
 8001544:	3501      	adds	r5, #1
 8001546:	68e3      	ldr	r3, [r4, #12]
 8001548:	9903      	ldr	r1, [sp, #12]
 800154a:	1a5b      	subs	r3, r3, r1
 800154c:	42ab      	cmp	r3, r5
 800154e:	dcf2      	bgt.n	8001536 <_printf_i+0x212>
 8001550:	e7eb      	b.n	800152a <_printf_i+0x206>
 8001552:	2500      	movs	r5, #0
 8001554:	f104 0619 	add.w	r6, r4, #25
 8001558:	e7f5      	b.n	8001546 <_printf_i+0x222>
 800155a:	bf00      	nop
 800155c:	08001680 	.word	0x08001680
 8001560:	08001691 	.word	0x08001691

08001564 <memmove>:
 8001564:	4288      	cmp	r0, r1
 8001566:	b510      	push	{r4, lr}
 8001568:	eb01 0402 	add.w	r4, r1, r2
 800156c:	d902      	bls.n	8001574 <memmove+0x10>
 800156e:	4284      	cmp	r4, r0
 8001570:	4623      	mov	r3, r4
 8001572:	d807      	bhi.n	8001584 <memmove+0x20>
 8001574:	1e43      	subs	r3, r0, #1
 8001576:	42a1      	cmp	r1, r4
 8001578:	d008      	beq.n	800158c <memmove+0x28>
 800157a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800157e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001582:	e7f8      	b.n	8001576 <memmove+0x12>
 8001584:	4402      	add	r2, r0
 8001586:	4601      	mov	r1, r0
 8001588:	428a      	cmp	r2, r1
 800158a:	d100      	bne.n	800158e <memmove+0x2a>
 800158c:	bd10      	pop	{r4, pc}
 800158e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001596:	e7f7      	b.n	8001588 <memmove+0x24>

08001598 <_sbrk_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4d06      	ldr	r5, [pc, #24]	@ (80015b4 <_sbrk_r+0x1c>)
 800159c:	2300      	movs	r3, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	602b      	str	r3, [r5, #0]
 80015a4:	f7ff fb1e 	bl	8000be4 <_sbrk>
 80015a8:	1c43      	adds	r3, r0, #1
 80015aa:	d102      	bne.n	80015b2 <_sbrk_r+0x1a>
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	b103      	cbz	r3, 80015b2 <_sbrk_r+0x1a>
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	200001ac 	.word	0x200001ac

080015b8 <memcpy>:
 80015b8:	440a      	add	r2, r1
 80015ba:	4291      	cmp	r1, r2
 80015bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80015c0:	d100      	bne.n	80015c4 <memcpy+0xc>
 80015c2:	4770      	bx	lr
 80015c4:	b510      	push	{r4, lr}
 80015c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80015ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80015ce:	4291      	cmp	r1, r2
 80015d0:	d1f9      	bne.n	80015c6 <memcpy+0xe>
 80015d2:	bd10      	pop	{r4, pc}

080015d4 <_realloc_r>:
 80015d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d8:	4680      	mov	r8, r0
 80015da:	4615      	mov	r5, r2
 80015dc:	460c      	mov	r4, r1
 80015de:	b921      	cbnz	r1, 80015ea <_realloc_r+0x16>
 80015e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015e4:	4611      	mov	r1, r2
 80015e6:	f7ff bc4b 	b.w	8000e80 <_malloc_r>
 80015ea:	b92a      	cbnz	r2, 80015f8 <_realloc_r+0x24>
 80015ec:	f7ff fbdc 	bl	8000da8 <_free_r>
 80015f0:	2400      	movs	r4, #0
 80015f2:	4620      	mov	r0, r4
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f8:	f000 f81a 	bl	8001630 <_malloc_usable_size_r>
 80015fc:	4285      	cmp	r5, r0
 80015fe:	4606      	mov	r6, r0
 8001600:	d802      	bhi.n	8001608 <_realloc_r+0x34>
 8001602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001606:	d8f4      	bhi.n	80015f2 <_realloc_r+0x1e>
 8001608:	4629      	mov	r1, r5
 800160a:	4640      	mov	r0, r8
 800160c:	f7ff fc38 	bl	8000e80 <_malloc_r>
 8001610:	4607      	mov	r7, r0
 8001612:	2800      	cmp	r0, #0
 8001614:	d0ec      	beq.n	80015f0 <_realloc_r+0x1c>
 8001616:	42b5      	cmp	r5, r6
 8001618:	462a      	mov	r2, r5
 800161a:	4621      	mov	r1, r4
 800161c:	bf28      	it	cs
 800161e:	4632      	movcs	r2, r6
 8001620:	f7ff ffca 	bl	80015b8 <memcpy>
 8001624:	4621      	mov	r1, r4
 8001626:	4640      	mov	r0, r8
 8001628:	f7ff fbbe 	bl	8000da8 <_free_r>
 800162c:	463c      	mov	r4, r7
 800162e:	e7e0      	b.n	80015f2 <_realloc_r+0x1e>

08001630 <_malloc_usable_size_r>:
 8001630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001634:	1f18      	subs	r0, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfbc      	itt	lt
 800163a:	580b      	ldrlt	r3, [r1, r0]
 800163c:	18c0      	addlt	r0, r0, r3
 800163e:	4770      	bx	lr

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
