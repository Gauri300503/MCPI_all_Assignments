
assignment5_que1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d98  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000f78  08000f78  00001f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fbc  08000fbc  00002050  2**0
                  CONTENTS
  4 .ARM          00000008  08000fbc  08000fbc  00001fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000fc4  08000fc4  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00001fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00001fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000fcc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002050  2**0
                  CONTENTS
 10 .bss          0000016c  20000050  20000050  00002050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00002050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013e1  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005fa  00000000  00000000  0000345b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00003a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b0  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018455  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000191a  00000000  00000000  0001c06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c28e  00000000  00000000  0001d987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a9c15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000790  00000000  00000000  000a9c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aa3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007a  00000000  00000000  000aa407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000050 	.word	0x20000050
 80001fc:	00000000 	.word	0x00000000
 8000200:	08000f60 	.word	0x08000f60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000054 	.word	0x20000054
 800021c:	08000f60 	.word	0x08000f60

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	@ 0x28
 80002c4:	af00      	add	r7, sp, #0

		char str[32];
		SystemInit();
 80002c6:	f000 f8bd 	bl	8000444 <SystemInit>
		SwitchInit();
 80002ca:	f000 f83d 	bl	8000348 <SwitchInit>
		int count=0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	627b      	str	r3, [r7, #36]	@ 0x24
		UartInit(9600);
 80002d2:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002d6:	f000 f8eb 	bl	80004b0 <UartInit>

		//UartPuts("Hello DESD!\r\n");
		//UartPuts("God Bless You!\r\n");
		while(1) {

			while(SwitchExtiFlag == 0)
 80002da:	bf00      	nop
 80002dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <main+0x48>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0fb      	beq.n	80002dc <main+0x1c>
						;
            count++;
 80002e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002e6:	3301      	adds	r3, #1
 80002e8:	627b      	str	r3, [r7, #36]	@ 0x24
			sprintf(str,"count=  %d \r \n",count);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002ee:	4907      	ldr	r1, [pc, #28]	@ (800030c <main+0x4c>)
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f99d 	bl	8000630 <siprintf>
			UartPuts(str);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f953 	bl	80005a4 <UartPuts>

			SwitchExtiFlag = 0;
 80002fe:	4b02      	ldr	r3, [pc, #8]	@ (8000308 <main+0x48>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
			while(SwitchExtiFlag == 0)
 8000304:	e7e9      	b.n	80002da <main+0x1a>
 8000306:	bf00      	nop
 8000308:	2000006c 	.word	0x2000006c
 800030c:	08000f78 	.word	0x08000f78

08000310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	db0b      	blt.n	800033a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 021f 	and.w	r2, r3, #31
 8000328:	4906      	ldr	r1, [pc, #24]	@ (8000344 <__NVIC_EnableIRQ+0x34>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100

08000348 <SwitchInit>:
 */

#include "switch_intr.h"
#include "uart.h"

void SwitchInit(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	// Enable GPIO clock
    RCC->AHB1ENR |= BV(SWITCH_GPIO_CLKEN);
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <SwitchInit+0x58>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <SwitchInit+0x58>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
	// Set gpio mode as input
    GPIOA->MODER &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 8000358:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <SwitchInit+0x5c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a11      	ldr	r2, [pc, #68]	@ (80003a4 <SwitchInit+0x5c>)
 800035e:	f023 0303 	bic.w	r3, r3, #3
 8000362:	6013      	str	r3, [r2, #0]
	// set no pull-up pull-down registers
    GPIOA->PUPDR &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <SwitchInit+0x5c>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <SwitchInit+0x5c>)
 800036a:	f023 0303 	bic.w	r3, r3, #3
 800036e:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
    EXTI->FTSR |= BV(SWITCH_EXTI);
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <SwitchInit+0x60>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <SwitchInit+0x60>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
    EXTI->IMR |= BV(SWITCH_EXTI);
 800037c:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <SwitchInit+0x60>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a09      	ldr	r2, [pc, #36]	@ (80003a8 <SwitchInit+0x60>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx) -- EXTI0 --> EXTICR1[3:0] = 0000
    SYSCFG->EXTICR[0] &= ~(BV(3)|BV(2)|BV(1)|BV(0));
 8000388:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <SwitchInit+0x64>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a07      	ldr	r2, [pc, #28]	@ (80003ac <SwitchInit+0x64>)
 800038e:	f023 030f 	bic.w	r3, r3, #15
 8000392:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
    NVIC_EnableIRQ(EXTI0_IRQn); // EXTI0_IRQn
 8000394:	2006      	movs	r0, #6
 8000396:	f7ff ffbb 	bl	8000310 <__NVIC_EnableIRQ>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40023800 	.word	0x40023800
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40013c00 	.word	0x40013c00
 80003ac:	40013800 	.word	0x40013800

080003b0 <EXTI0_IRQHandler>:
// Global SwitchExtiFlag
uint32_t SwitchExtiFlag = 0;

// intr handler(ISR) written with exactly same name as of handler fn name in vector table.
// it overrides the WEAK function written in startup.S
void EXTI0_IRQHandler(void) {
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	// acknowledge the interrupt
	EXTI->PR |= BV(SWITCH_EXTI);
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <EXTI0_IRQHandler+0x20>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a05      	ldr	r2, [pc, #20]	@ (80003d0 <EXTI0_IRQHandler+0x20>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6153      	str	r3, [r2, #20]
	SwitchExtiFlag = 1;
 80003c0:	4b04      	ldr	r3, [pc, #16]	@ (80003d4 <EXTI0_IRQHandler+0x24>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	601a      	str	r2, [r3, #0]


}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40013c00 	.word	0x40013c00
 80003d4:	2000006c 	.word	0x2000006c

080003d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e0:	4a14      	ldr	r2, [pc, #80]	@ (8000434 <_sbrk+0x5c>)
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <_sbrk+0x60>)
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <_sbrk+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d102      	bne.n	80003fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f4:	4b11      	ldr	r3, [pc, #68]	@ (800043c <_sbrk+0x64>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	@ (8000440 <_sbrk+0x68>)
 80003f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003fa:	4b10      	ldr	r3, [pc, #64]	@ (800043c <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	429a      	cmp	r2, r3
 8000406:	d207      	bcs.n	8000418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000408:	f000 f932 	bl	8000670 <__errno>
 800040c:	4603      	mov	r3, r0
 800040e:	220c      	movs	r2, #12
 8000410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000416:	e009      	b.n	800042c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041e:	4b07      	ldr	r3, [pc, #28]	@ (800043c <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	4a05      	ldr	r2, [pc, #20]	@ (800043c <_sbrk+0x64>)
 8000428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800042a:	68fb      	ldr	r3, [r7, #12]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20020000 	.word	0x20020000
 8000438:	00000400 	.word	0x00000400
 800043c:	20000070 	.word	0x20000070
 8000440:	200001c0 	.word	0x200001c0

08000444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  DWT_Init();
 8000448:	f000 f802 	bl	8000450 <DWT_Init>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}

08000450 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000454:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <DWT_Init+0x58>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a13      	ldr	r2, [pc, #76]	@ (80004a8 <DWT_Init+0x58>)
 800045a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800045e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <DWT_Init+0x58>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a10      	ldr	r2, [pc, #64]	@ (80004a8 <DWT_Init+0x58>)
 8000466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800046a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <DWT_Init+0x5c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a0e      	ldr	r2, [pc, #56]	@ (80004ac <DWT_Init+0x5c>)
 8000472:	f023 0301 	bic.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <DWT_Init+0x5c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a0b      	ldr	r2, [pc, #44]	@ (80004ac <DWT_Init+0x5c>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <DWT_Init+0x5c>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800048a:	bf00      	nop
    __ASM volatile ("NOP");
 800048c:	bf00      	nop
    __ASM volatile ("NOP");
 800048e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <DWT_Init+0x5c>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	bf0c      	ite	eq
 8000498:	2301      	moveq	r3, #1
 800049a:	2300      	movne	r3, #0
 800049c:	b2db      	uxtb	r3, r3
}
 800049e:	4618      	mov	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000edf0 	.word	0xe000edf0
 80004ac:	e0001000 	.word	0xe0001000

080004b0 <UartInit>:
 */


#include "uart.h"

void UartInit(uint32_t baud) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	// enable gpio clock -- AHB1ENR.0
	RCC->AHB1ENR |= BV(GPIO_UART_CLKEN);
 80004b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000568 <UartInit+0xb8>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000568 <UartInit+0xb8>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pins to alt fn 7 (AF7) -- AFRL = 0111
	GPIO_UART->AFR[0] |= BV(14) | BV(13) | BV(12) | BV(10) | BV(9) | BV(8);
 80004c4:	4b29      	ldr	r3, [pc, #164]	@ (800056c <UartInit+0xbc>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4a28      	ldr	r2, [pc, #160]	@ (800056c <UartInit+0xbc>)
 80004ca:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80004ce:	6213      	str	r3, [r2, #32]
	GPIO_UART->AFR[0] &= ~(BV(15) | BV(11));
 80004d0:	4b26      	ldr	r3, [pc, #152]	@ (800056c <UartInit+0xbc>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	4a25      	ldr	r2, [pc, #148]	@ (800056c <UartInit+0xbc>)
 80004d6:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 80004da:	6213      	str	r3, [r2, #32]
	// set gpio pins mode to alt fn	-- MODER = 10
	GPIO_UART->MODER &= ~(BV(UART_TX_PIN*2) | BV(UART_RX_PIN*2));
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <UartInit+0xbc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a22      	ldr	r2, [pc, #136]	@ (800056c <UartInit+0xbc>)
 80004e2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80004e6:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER |= (BV(UART_TX_PIN*2+1) | BV(UART_RX_PIN*2+1));
 80004e8:	4b20      	ldr	r3, [pc, #128]	@ (800056c <UartInit+0xbc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1f      	ldr	r2, [pc, #124]	@ (800056c <UartInit+0xbc>)
 80004ee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80004f2:	6013      	str	r3, [r2, #0]

	// enable uart clock -- APB1ENR.17
	RCC->APB1ENR |= BV(UART_CLKEN);
 80004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <UartInit+0xb8>)
 80004f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000568 <UartInit+0xb8>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004fe:	6413      	str	r3, [r2, #64]	@ 0x40
	// enable transmission and reception on uart
	UART->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <UartInit+0xc0>)
 8000502:	220c      	movs	r2, #12
 8000504:	60da      	str	r2, [r3, #12]
	// set word length in CR1 -- M bit = 8-bit data len, Over8 = 0
	UART->CR1 &= ~(BV(USART_CR1_M_Pos) | BV(USART_CR1_OVER8_Pos));
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <UartInit+0xc0>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <UartInit+0xc0>)
 800050c:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000510:	60d3      	str	r3, [r2, #12]
	// set stop bits in CR2 -- 1 stop bit
	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <UartInit+0xc0>)
 8000514:	691b      	ldr	r3, [r3, #16]
 8000516:	4a16      	ldr	r2, [pc, #88]	@ (8000570 <UartInit+0xc0>)
 8000518:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800051c:	6113      	str	r3, [r2, #16]
	// set baud rate -- UBRR
	if(baud == 9600)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000524:	d104      	bne.n	8000530 <UartInit+0x80>
		UART->BRR = UBRR_9600;
 8000526:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <UartInit+0xc0>)
 8000528:	f240 6283 	movw	r2, #1667	@ 0x683
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	e00f      	b.n	8000550 <UartInit+0xa0>
	else if(baud == 38400)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000536:	d104      	bne.n	8000542 <UartInit+0x92>
		UART->BRR = UBRR_38400;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <UartInit+0xc0>)
 800053a:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	e006      	b.n	8000550 <UartInit+0xa0>
	else if(baud == 115200)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000548:	d102      	bne.n	8000550 <UartInit+0xa0>
			UART->BRR = UBRR_115200;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <UartInit+0xc0>)
 800054c:	228b      	movs	r2, #139	@ 0x8b
 800054e:	609a      	str	r2, [r3, #8]
	// enable uart in CR1 -- UE bit
        UART->CR1 |= BV(USART_CR1_UE_Pos);
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <UartInit+0xc0>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <UartInit+0xc0>)
 8000556:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800055a:	60d3      	str	r3, [r2, #12]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800
 800056c:	40020000 	.word	0x40020000
 8000570:	40004400 	.word	0x40004400

08000574 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	// write a byte in data register
	UART->DR = ch;
 800057e:	4a08      	ldr	r2, [pc, #32]	@ (80005a0 <UartPutch+0x2c>)
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	6053      	str	r3, [r2, #4]
	// wait until TXE bit is 1 i.e. while TXE = 0
	while( (UART->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000584:	bf00      	nop
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <UartPutch+0x2c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <UartPutch+0x12>
		;
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40004400 	.word	0x40004400

080005a4 <UartPuts>:

void UartPuts(char str[]) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]!='\0'; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e009      	b.n	80005c6 <UartPuts+0x22>
		UartPutch((uint8_t)str[i]);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ffda 	bl	8000574 <UartPutch>
	for(int i=0; str[i]!='\0'; i++)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1ef      	bne.n	80005b2 <UartPuts+0xe>
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	@ (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f7ff ff30 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	@ (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 f837 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fe57 	bl	80002c0 <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000620:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000624:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000628:	200001bc 	.word	0x200001bc

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <siprintf>:
 8000630:	b40e      	push	{r1, r2, r3}
 8000632:	b500      	push	{lr}
 8000634:	b09c      	sub	sp, #112	@ 0x70
 8000636:	ab1d      	add	r3, sp, #116	@ 0x74
 8000638:	9002      	str	r0, [sp, #8]
 800063a:	9006      	str	r0, [sp, #24]
 800063c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000640:	4809      	ldr	r0, [pc, #36]	@ (8000668 <siprintf+0x38>)
 8000642:	9107      	str	r1, [sp, #28]
 8000644:	9104      	str	r1, [sp, #16]
 8000646:	4909      	ldr	r1, [pc, #36]	@ (800066c <siprintf+0x3c>)
 8000648:	f853 2b04 	ldr.w	r2, [r3], #4
 800064c:	9105      	str	r1, [sp, #20]
 800064e:	6800      	ldr	r0, [r0, #0]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	a902      	add	r1, sp, #8
 8000654:	f000 f98c 	bl	8000970 <_svfiprintf_r>
 8000658:	9b02      	ldr	r3, [sp, #8]
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	b01c      	add	sp, #112	@ 0x70
 8000660:	f85d eb04 	ldr.w	lr, [sp], #4
 8000664:	b003      	add	sp, #12
 8000666:	4770      	bx	lr
 8000668:	20000000 	.word	0x20000000
 800066c:	ffff0208 	.word	0xffff0208

08000670 <__errno>:
 8000670:	4b01      	ldr	r3, [pc, #4]	@ (8000678 <__errno+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	@ (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	@ (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	@ (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	@ (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 fc66 	bl	8000f60 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	08000fc4 	.word	0x08000fc4
 80006b8:	08000fc4 	.word	0x08000fc4
 80006bc:	08000fc4 	.word	0x08000fc4
 80006c0:	08000fc8 	.word	0x08000fc8

080006c4 <__retarget_lock_acquire_recursive>:
 80006c4:	4770      	bx	lr

080006c6 <__retarget_lock_release_recursive>:
 80006c6:	4770      	bx	lr

080006c8 <_free_r>:
 80006c8:	b538      	push	{r3, r4, r5, lr}
 80006ca:	4605      	mov	r5, r0
 80006cc:	2900      	cmp	r1, #0
 80006ce:	d041      	beq.n	8000754 <_free_r+0x8c>
 80006d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80006d4:	1f0c      	subs	r4, r1, #4
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bfb8      	it	lt
 80006da:	18e4      	addlt	r4, r4, r3
 80006dc:	f000 f8e0 	bl	80008a0 <__malloc_lock>
 80006e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000758 <_free_r+0x90>)
 80006e2:	6813      	ldr	r3, [r2, #0]
 80006e4:	b933      	cbnz	r3, 80006f4 <_free_r+0x2c>
 80006e6:	6063      	str	r3, [r4, #4]
 80006e8:	6014      	str	r4, [r2, #0]
 80006ea:	4628      	mov	r0, r5
 80006ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006f0:	f000 b8dc 	b.w	80008ac <__malloc_unlock>
 80006f4:	42a3      	cmp	r3, r4
 80006f6:	d908      	bls.n	800070a <_free_r+0x42>
 80006f8:	6820      	ldr	r0, [r4, #0]
 80006fa:	1821      	adds	r1, r4, r0
 80006fc:	428b      	cmp	r3, r1
 80006fe:	bf01      	itttt	eq
 8000700:	6819      	ldreq	r1, [r3, #0]
 8000702:	685b      	ldreq	r3, [r3, #4]
 8000704:	1809      	addeq	r1, r1, r0
 8000706:	6021      	streq	r1, [r4, #0]
 8000708:	e7ed      	b.n	80006e6 <_free_r+0x1e>
 800070a:	461a      	mov	r2, r3
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	b10b      	cbz	r3, 8000714 <_free_r+0x4c>
 8000710:	42a3      	cmp	r3, r4
 8000712:	d9fa      	bls.n	800070a <_free_r+0x42>
 8000714:	6811      	ldr	r1, [r2, #0]
 8000716:	1850      	adds	r0, r2, r1
 8000718:	42a0      	cmp	r0, r4
 800071a:	d10b      	bne.n	8000734 <_free_r+0x6c>
 800071c:	6820      	ldr	r0, [r4, #0]
 800071e:	4401      	add	r1, r0
 8000720:	1850      	adds	r0, r2, r1
 8000722:	4283      	cmp	r3, r0
 8000724:	6011      	str	r1, [r2, #0]
 8000726:	d1e0      	bne.n	80006ea <_free_r+0x22>
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	6053      	str	r3, [r2, #4]
 800072e:	4408      	add	r0, r1
 8000730:	6010      	str	r0, [r2, #0]
 8000732:	e7da      	b.n	80006ea <_free_r+0x22>
 8000734:	d902      	bls.n	800073c <_free_r+0x74>
 8000736:	230c      	movs	r3, #12
 8000738:	602b      	str	r3, [r5, #0]
 800073a:	e7d6      	b.n	80006ea <_free_r+0x22>
 800073c:	6820      	ldr	r0, [r4, #0]
 800073e:	1821      	adds	r1, r4, r0
 8000740:	428b      	cmp	r3, r1
 8000742:	bf04      	itt	eq
 8000744:	6819      	ldreq	r1, [r3, #0]
 8000746:	685b      	ldreq	r3, [r3, #4]
 8000748:	6063      	str	r3, [r4, #4]
 800074a:	bf04      	itt	eq
 800074c:	1809      	addeq	r1, r1, r0
 800074e:	6021      	streq	r1, [r4, #0]
 8000750:	6054      	str	r4, [r2, #4]
 8000752:	e7ca      	b.n	80006ea <_free_r+0x22>
 8000754:	bd38      	pop	{r3, r4, r5, pc}
 8000756:	bf00      	nop
 8000758:	200001b8 	.word	0x200001b8

0800075c <sbrk_aligned>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	4e0f      	ldr	r6, [pc, #60]	@ (800079c <sbrk_aligned+0x40>)
 8000760:	460c      	mov	r4, r1
 8000762:	6831      	ldr	r1, [r6, #0]
 8000764:	4605      	mov	r5, r0
 8000766:	b911      	cbnz	r1, 800076e <sbrk_aligned+0x12>
 8000768:	f000 fba6 	bl	8000eb8 <_sbrk_r>
 800076c:	6030      	str	r0, [r6, #0]
 800076e:	4621      	mov	r1, r4
 8000770:	4628      	mov	r0, r5
 8000772:	f000 fba1 	bl	8000eb8 <_sbrk_r>
 8000776:	1c43      	adds	r3, r0, #1
 8000778:	d103      	bne.n	8000782 <sbrk_aligned+0x26>
 800077a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800077e:	4620      	mov	r0, r4
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	1cc4      	adds	r4, r0, #3
 8000784:	f024 0403 	bic.w	r4, r4, #3
 8000788:	42a0      	cmp	r0, r4
 800078a:	d0f8      	beq.n	800077e <sbrk_aligned+0x22>
 800078c:	1a21      	subs	r1, r4, r0
 800078e:	4628      	mov	r0, r5
 8000790:	f000 fb92 	bl	8000eb8 <_sbrk_r>
 8000794:	3001      	adds	r0, #1
 8000796:	d1f2      	bne.n	800077e <sbrk_aligned+0x22>
 8000798:	e7ef      	b.n	800077a <sbrk_aligned+0x1e>
 800079a:	bf00      	nop
 800079c:	200001b4 	.word	0x200001b4

080007a0 <_malloc_r>:
 80007a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007a4:	1ccd      	adds	r5, r1, #3
 80007a6:	f025 0503 	bic.w	r5, r5, #3
 80007aa:	3508      	adds	r5, #8
 80007ac:	2d0c      	cmp	r5, #12
 80007ae:	bf38      	it	cc
 80007b0:	250c      	movcc	r5, #12
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	4606      	mov	r6, r0
 80007b6:	db01      	blt.n	80007bc <_malloc_r+0x1c>
 80007b8:	42a9      	cmp	r1, r5
 80007ba:	d904      	bls.n	80007c6 <_malloc_r+0x26>
 80007bc:	230c      	movs	r3, #12
 80007be:	6033      	str	r3, [r6, #0]
 80007c0:	2000      	movs	r0, #0
 80007c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800089c <_malloc_r+0xfc>
 80007ca:	f000 f869 	bl	80008a0 <__malloc_lock>
 80007ce:	f8d8 3000 	ldr.w	r3, [r8]
 80007d2:	461c      	mov	r4, r3
 80007d4:	bb44      	cbnz	r4, 8000828 <_malloc_r+0x88>
 80007d6:	4629      	mov	r1, r5
 80007d8:	4630      	mov	r0, r6
 80007da:	f7ff ffbf 	bl	800075c <sbrk_aligned>
 80007de:	1c43      	adds	r3, r0, #1
 80007e0:	4604      	mov	r4, r0
 80007e2:	d158      	bne.n	8000896 <_malloc_r+0xf6>
 80007e4:	f8d8 4000 	ldr.w	r4, [r8]
 80007e8:	4627      	mov	r7, r4
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d143      	bne.n	8000876 <_malloc_r+0xd6>
 80007ee:	2c00      	cmp	r4, #0
 80007f0:	d04b      	beq.n	800088a <_malloc_r+0xea>
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	4639      	mov	r1, r7
 80007f6:	4630      	mov	r0, r6
 80007f8:	eb04 0903 	add.w	r9, r4, r3
 80007fc:	f000 fb5c 	bl	8000eb8 <_sbrk_r>
 8000800:	4581      	cmp	r9, r0
 8000802:	d142      	bne.n	800088a <_malloc_r+0xea>
 8000804:	6821      	ldr	r1, [r4, #0]
 8000806:	1a6d      	subs	r5, r5, r1
 8000808:	4629      	mov	r1, r5
 800080a:	4630      	mov	r0, r6
 800080c:	f7ff ffa6 	bl	800075c <sbrk_aligned>
 8000810:	3001      	adds	r0, #1
 8000812:	d03a      	beq.n	800088a <_malloc_r+0xea>
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	442b      	add	r3, r5
 8000818:	6023      	str	r3, [r4, #0]
 800081a:	f8d8 3000 	ldr.w	r3, [r8]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	bb62      	cbnz	r2, 800087c <_malloc_r+0xdc>
 8000822:	f8c8 7000 	str.w	r7, [r8]
 8000826:	e00f      	b.n	8000848 <_malloc_r+0xa8>
 8000828:	6822      	ldr	r2, [r4, #0]
 800082a:	1b52      	subs	r2, r2, r5
 800082c:	d420      	bmi.n	8000870 <_malloc_r+0xd0>
 800082e:	2a0b      	cmp	r2, #11
 8000830:	d917      	bls.n	8000862 <_malloc_r+0xc2>
 8000832:	1961      	adds	r1, r4, r5
 8000834:	42a3      	cmp	r3, r4
 8000836:	6025      	str	r5, [r4, #0]
 8000838:	bf18      	it	ne
 800083a:	6059      	strne	r1, [r3, #4]
 800083c:	6863      	ldr	r3, [r4, #4]
 800083e:	bf08      	it	eq
 8000840:	f8c8 1000 	streq.w	r1, [r8]
 8000844:	5162      	str	r2, [r4, r5]
 8000846:	604b      	str	r3, [r1, #4]
 8000848:	4630      	mov	r0, r6
 800084a:	f000 f82f 	bl	80008ac <__malloc_unlock>
 800084e:	f104 000b 	add.w	r0, r4, #11
 8000852:	1d23      	adds	r3, r4, #4
 8000854:	f020 0007 	bic.w	r0, r0, #7
 8000858:	1ac2      	subs	r2, r0, r3
 800085a:	bf1c      	itt	ne
 800085c:	1a1b      	subne	r3, r3, r0
 800085e:	50a3      	strne	r3, [r4, r2]
 8000860:	e7af      	b.n	80007c2 <_malloc_r+0x22>
 8000862:	6862      	ldr	r2, [r4, #4]
 8000864:	42a3      	cmp	r3, r4
 8000866:	bf0c      	ite	eq
 8000868:	f8c8 2000 	streq.w	r2, [r8]
 800086c:	605a      	strne	r2, [r3, #4]
 800086e:	e7eb      	b.n	8000848 <_malloc_r+0xa8>
 8000870:	4623      	mov	r3, r4
 8000872:	6864      	ldr	r4, [r4, #4]
 8000874:	e7ae      	b.n	80007d4 <_malloc_r+0x34>
 8000876:	463c      	mov	r4, r7
 8000878:	687f      	ldr	r7, [r7, #4]
 800087a:	e7b6      	b.n	80007ea <_malloc_r+0x4a>
 800087c:	461a      	mov	r2, r3
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	42a3      	cmp	r3, r4
 8000882:	d1fb      	bne.n	800087c <_malloc_r+0xdc>
 8000884:	2300      	movs	r3, #0
 8000886:	6053      	str	r3, [r2, #4]
 8000888:	e7de      	b.n	8000848 <_malloc_r+0xa8>
 800088a:	230c      	movs	r3, #12
 800088c:	6033      	str	r3, [r6, #0]
 800088e:	4630      	mov	r0, r6
 8000890:	f000 f80c 	bl	80008ac <__malloc_unlock>
 8000894:	e794      	b.n	80007c0 <_malloc_r+0x20>
 8000896:	6005      	str	r5, [r0, #0]
 8000898:	e7d6      	b.n	8000848 <_malloc_r+0xa8>
 800089a:	bf00      	nop
 800089c:	200001b8 	.word	0x200001b8

080008a0 <__malloc_lock>:
 80008a0:	4801      	ldr	r0, [pc, #4]	@ (80008a8 <__malloc_lock+0x8>)
 80008a2:	f7ff bf0f 	b.w	80006c4 <__retarget_lock_acquire_recursive>
 80008a6:	bf00      	nop
 80008a8:	200001b0 	.word	0x200001b0

080008ac <__malloc_unlock>:
 80008ac:	4801      	ldr	r0, [pc, #4]	@ (80008b4 <__malloc_unlock+0x8>)
 80008ae:	f7ff bf0a 	b.w	80006c6 <__retarget_lock_release_recursive>
 80008b2:	bf00      	nop
 80008b4:	200001b0 	.word	0x200001b0

080008b8 <__ssputs_r>:
 80008b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008bc:	688e      	ldr	r6, [r1, #8]
 80008be:	461f      	mov	r7, r3
 80008c0:	42be      	cmp	r6, r7
 80008c2:	680b      	ldr	r3, [r1, #0]
 80008c4:	4682      	mov	sl, r0
 80008c6:	460c      	mov	r4, r1
 80008c8:	4690      	mov	r8, r2
 80008ca:	d82d      	bhi.n	8000928 <__ssputs_r+0x70>
 80008cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80008d4:	d026      	beq.n	8000924 <__ssputs_r+0x6c>
 80008d6:	6965      	ldr	r5, [r4, #20]
 80008d8:	6909      	ldr	r1, [r1, #16]
 80008da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008de:	eba3 0901 	sub.w	r9, r3, r1
 80008e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008e6:	1c7b      	adds	r3, r7, #1
 80008e8:	444b      	add	r3, r9
 80008ea:	106d      	asrs	r5, r5, #1
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf38      	it	cc
 80008f0:	461d      	movcc	r5, r3
 80008f2:	0553      	lsls	r3, r2, #21
 80008f4:	d527      	bpl.n	8000946 <__ssputs_r+0x8e>
 80008f6:	4629      	mov	r1, r5
 80008f8:	f7ff ff52 	bl	80007a0 <_malloc_r>
 80008fc:	4606      	mov	r6, r0
 80008fe:	b360      	cbz	r0, 800095a <__ssputs_r+0xa2>
 8000900:	6921      	ldr	r1, [r4, #16]
 8000902:	464a      	mov	r2, r9
 8000904:	f000 fae8 	bl	8000ed8 <memcpy>
 8000908:	89a3      	ldrh	r3, [r4, #12]
 800090a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800090e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000912:	81a3      	strh	r3, [r4, #12]
 8000914:	6126      	str	r6, [r4, #16]
 8000916:	6165      	str	r5, [r4, #20]
 8000918:	444e      	add	r6, r9
 800091a:	eba5 0509 	sub.w	r5, r5, r9
 800091e:	6026      	str	r6, [r4, #0]
 8000920:	60a5      	str	r5, [r4, #8]
 8000922:	463e      	mov	r6, r7
 8000924:	42be      	cmp	r6, r7
 8000926:	d900      	bls.n	800092a <__ssputs_r+0x72>
 8000928:	463e      	mov	r6, r7
 800092a:	6820      	ldr	r0, [r4, #0]
 800092c:	4632      	mov	r2, r6
 800092e:	4641      	mov	r1, r8
 8000930:	f000 faa8 	bl	8000e84 <memmove>
 8000934:	68a3      	ldr	r3, [r4, #8]
 8000936:	1b9b      	subs	r3, r3, r6
 8000938:	60a3      	str	r3, [r4, #8]
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	4433      	add	r3, r6
 800093e:	6023      	str	r3, [r4, #0]
 8000940:	2000      	movs	r0, #0
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	462a      	mov	r2, r5
 8000948:	f000 fad4 	bl	8000ef4 <_realloc_r>
 800094c:	4606      	mov	r6, r0
 800094e:	2800      	cmp	r0, #0
 8000950:	d1e0      	bne.n	8000914 <__ssputs_r+0x5c>
 8000952:	6921      	ldr	r1, [r4, #16]
 8000954:	4650      	mov	r0, sl
 8000956:	f7ff feb7 	bl	80006c8 <_free_r>
 800095a:	230c      	movs	r3, #12
 800095c:	f8ca 3000 	str.w	r3, [sl]
 8000960:	89a3      	ldrh	r3, [r4, #12]
 8000962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000966:	81a3      	strh	r3, [r4, #12]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800096c:	e7e9      	b.n	8000942 <__ssputs_r+0x8a>
	...

08000970 <_svfiprintf_r>:
 8000970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000974:	4698      	mov	r8, r3
 8000976:	898b      	ldrh	r3, [r1, #12]
 8000978:	061b      	lsls	r3, r3, #24
 800097a:	b09d      	sub	sp, #116	@ 0x74
 800097c:	4607      	mov	r7, r0
 800097e:	460d      	mov	r5, r1
 8000980:	4614      	mov	r4, r2
 8000982:	d510      	bpl.n	80009a6 <_svfiprintf_r+0x36>
 8000984:	690b      	ldr	r3, [r1, #16]
 8000986:	b973      	cbnz	r3, 80009a6 <_svfiprintf_r+0x36>
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	f7ff ff09 	bl	80007a0 <_malloc_r>
 800098e:	6028      	str	r0, [r5, #0]
 8000990:	6128      	str	r0, [r5, #16]
 8000992:	b930      	cbnz	r0, 80009a2 <_svfiprintf_r+0x32>
 8000994:	230c      	movs	r3, #12
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	b01d      	add	sp, #116	@ 0x74
 800099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a2:	2340      	movs	r3, #64	@ 0x40
 80009a4:	616b      	str	r3, [r5, #20]
 80009a6:	2300      	movs	r3, #0
 80009a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80009aa:	2320      	movs	r3, #32
 80009ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80009b4:	2330      	movs	r3, #48	@ 0x30
 80009b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b54 <_svfiprintf_r+0x1e4>
 80009ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009be:	f04f 0901 	mov.w	r9, #1
 80009c2:	4623      	mov	r3, r4
 80009c4:	469a      	mov	sl, r3
 80009c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ca:	b10a      	cbz	r2, 80009d0 <_svfiprintf_r+0x60>
 80009cc:	2a25      	cmp	r2, #37	@ 0x25
 80009ce:	d1f9      	bne.n	80009c4 <_svfiprintf_r+0x54>
 80009d0:	ebba 0b04 	subs.w	fp, sl, r4
 80009d4:	d00b      	beq.n	80009ee <_svfiprintf_r+0x7e>
 80009d6:	465b      	mov	r3, fp
 80009d8:	4622      	mov	r2, r4
 80009da:	4629      	mov	r1, r5
 80009dc:	4638      	mov	r0, r7
 80009de:	f7ff ff6b 	bl	80008b8 <__ssputs_r>
 80009e2:	3001      	adds	r0, #1
 80009e4:	f000 80a7 	beq.w	8000b36 <_svfiprintf_r+0x1c6>
 80009e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009ea:	445a      	add	r2, fp
 80009ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80009ee:	f89a 3000 	ldrb.w	r3, [sl]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 809f 	beq.w	8000b36 <_svfiprintf_r+0x1c6>
 80009f8:	2300      	movs	r3, #0
 80009fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a02:	f10a 0a01 	add.w	sl, sl, #1
 8000a06:	9304      	str	r3, [sp, #16]
 8000a08:	9307      	str	r3, [sp, #28]
 8000a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a10:	4654      	mov	r4, sl
 8000a12:	2205      	movs	r2, #5
 8000a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a18:	484e      	ldr	r0, [pc, #312]	@ (8000b54 <_svfiprintf_r+0x1e4>)
 8000a1a:	f7ff fc01 	bl	8000220 <memchr>
 8000a1e:	9a04      	ldr	r2, [sp, #16]
 8000a20:	b9d8      	cbnz	r0, 8000a5a <_svfiprintf_r+0xea>
 8000a22:	06d0      	lsls	r0, r2, #27
 8000a24:	bf44      	itt	mi
 8000a26:	2320      	movmi	r3, #32
 8000a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a2c:	0711      	lsls	r1, r2, #28
 8000a2e:	bf44      	itt	mi
 8000a30:	232b      	movmi	r3, #43	@ 0x2b
 8000a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a36:	f89a 3000 	ldrb.w	r3, [sl]
 8000a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a3c:	d015      	beq.n	8000a6a <_svfiprintf_r+0xfa>
 8000a3e:	9a07      	ldr	r2, [sp, #28]
 8000a40:	4654      	mov	r4, sl
 8000a42:	2000      	movs	r0, #0
 8000a44:	f04f 0c0a 	mov.w	ip, #10
 8000a48:	4621      	mov	r1, r4
 8000a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a4e:	3b30      	subs	r3, #48	@ 0x30
 8000a50:	2b09      	cmp	r3, #9
 8000a52:	d94b      	bls.n	8000aec <_svfiprintf_r+0x17c>
 8000a54:	b1b0      	cbz	r0, 8000a84 <_svfiprintf_r+0x114>
 8000a56:	9207      	str	r2, [sp, #28]
 8000a58:	e014      	b.n	8000a84 <_svfiprintf_r+0x114>
 8000a5a:	eba0 0308 	sub.w	r3, r0, r8
 8000a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	9304      	str	r3, [sp, #16]
 8000a66:	46a2      	mov	sl, r4
 8000a68:	e7d2      	b.n	8000a10 <_svfiprintf_r+0xa0>
 8000a6a:	9b03      	ldr	r3, [sp, #12]
 8000a6c:	1d19      	adds	r1, r3, #4
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	9103      	str	r1, [sp, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bfbb      	ittet	lt
 8000a76:	425b      	neglt	r3, r3
 8000a78:	f042 0202 	orrlt.w	r2, r2, #2
 8000a7c:	9307      	strge	r3, [sp, #28]
 8000a7e:	9307      	strlt	r3, [sp, #28]
 8000a80:	bfb8      	it	lt
 8000a82:	9204      	strlt	r2, [sp, #16]
 8000a84:	7823      	ldrb	r3, [r4, #0]
 8000a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a88:	d10a      	bne.n	8000aa0 <_svfiprintf_r+0x130>
 8000a8a:	7863      	ldrb	r3, [r4, #1]
 8000a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a8e:	d132      	bne.n	8000af6 <_svfiprintf_r+0x186>
 8000a90:	9b03      	ldr	r3, [sp, #12]
 8000a92:	1d1a      	adds	r2, r3, #4
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	9203      	str	r2, [sp, #12]
 8000a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a9c:	3402      	adds	r4, #2
 8000a9e:	9305      	str	r3, [sp, #20]
 8000aa0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000b58 <_svfiprintf_r+0x1e8>
 8000aa4:	7821      	ldrb	r1, [r4, #0]
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4650      	mov	r0, sl
 8000aaa:	f7ff fbb9 	bl	8000220 <memchr>
 8000aae:	b138      	cbz	r0, 8000ac0 <_svfiprintf_r+0x150>
 8000ab0:	9b04      	ldr	r3, [sp, #16]
 8000ab2:	eba0 000a 	sub.w	r0, r0, sl
 8000ab6:	2240      	movs	r2, #64	@ 0x40
 8000ab8:	4082      	lsls	r2, r0
 8000aba:	4313      	orrs	r3, r2
 8000abc:	3401      	adds	r4, #1
 8000abe:	9304      	str	r3, [sp, #16]
 8000ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac4:	4825      	ldr	r0, [pc, #148]	@ (8000b5c <_svfiprintf_r+0x1ec>)
 8000ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000aca:	2206      	movs	r2, #6
 8000acc:	f7ff fba8 	bl	8000220 <memchr>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d036      	beq.n	8000b42 <_svfiprintf_r+0x1d2>
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <_svfiprintf_r+0x1f0>)
 8000ad6:	bb1b      	cbnz	r3, 8000b20 <_svfiprintf_r+0x1b0>
 8000ad8:	9b03      	ldr	r3, [sp, #12]
 8000ada:	3307      	adds	r3, #7
 8000adc:	f023 0307 	bic.w	r3, r3, #7
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	9303      	str	r3, [sp, #12]
 8000ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ae6:	4433      	add	r3, r6
 8000ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aea:	e76a      	b.n	80009c2 <_svfiprintf_r+0x52>
 8000aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8000af0:	460c      	mov	r4, r1
 8000af2:	2001      	movs	r0, #1
 8000af4:	e7a8      	b.n	8000a48 <_svfiprintf_r+0xd8>
 8000af6:	2300      	movs	r3, #0
 8000af8:	3401      	adds	r4, #1
 8000afa:	9305      	str	r3, [sp, #20]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 0c0a 	mov.w	ip, #10
 8000b02:	4620      	mov	r0, r4
 8000b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b08:	3a30      	subs	r2, #48	@ 0x30
 8000b0a:	2a09      	cmp	r2, #9
 8000b0c:	d903      	bls.n	8000b16 <_svfiprintf_r+0x1a6>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0c6      	beq.n	8000aa0 <_svfiprintf_r+0x130>
 8000b12:	9105      	str	r1, [sp, #20]
 8000b14:	e7c4      	b.n	8000aa0 <_svfiprintf_r+0x130>
 8000b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e7f0      	b.n	8000b02 <_svfiprintf_r+0x192>
 8000b20:	ab03      	add	r3, sp, #12
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	462a      	mov	r2, r5
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <_svfiprintf_r+0x1f4>)
 8000b28:	a904      	add	r1, sp, #16
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	f3af 8000 	nop.w
 8000b30:	1c42      	adds	r2, r0, #1
 8000b32:	4606      	mov	r6, r0
 8000b34:	d1d6      	bne.n	8000ae4 <_svfiprintf_r+0x174>
 8000b36:	89ab      	ldrh	r3, [r5, #12]
 8000b38:	065b      	lsls	r3, r3, #25
 8000b3a:	f53f af2d 	bmi.w	8000998 <_svfiprintf_r+0x28>
 8000b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b40:	e72c      	b.n	800099c <_svfiprintf_r+0x2c>
 8000b42:	ab03      	add	r3, sp, #12
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	462a      	mov	r2, r5
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <_svfiprintf_r+0x1f4>)
 8000b4a:	a904      	add	r1, sp, #16
 8000b4c:	4638      	mov	r0, r7
 8000b4e:	f000 f879 	bl	8000c44 <_printf_i>
 8000b52:	e7ed      	b.n	8000b30 <_svfiprintf_r+0x1c0>
 8000b54:	08000f87 	.word	0x08000f87
 8000b58:	08000f8d 	.word	0x08000f8d
 8000b5c:	08000f91 	.word	0x08000f91
 8000b60:	00000000 	.word	0x00000000
 8000b64:	080008b9 	.word	0x080008b9

08000b68 <_printf_common>:
 8000b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b6c:	4616      	mov	r6, r2
 8000b6e:	4698      	mov	r8, r3
 8000b70:	688a      	ldr	r2, [r1, #8]
 8000b72:	690b      	ldr	r3, [r1, #16]
 8000b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	bfb8      	it	lt
 8000b7c:	4613      	movlt	r3, r2
 8000b7e:	6033      	str	r3, [r6, #0]
 8000b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b84:	4607      	mov	r7, r0
 8000b86:	460c      	mov	r4, r1
 8000b88:	b10a      	cbz	r2, 8000b8e <_printf_common+0x26>
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	6033      	str	r3, [r6, #0]
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	0699      	lsls	r1, r3, #26
 8000b92:	bf42      	ittt	mi
 8000b94:	6833      	ldrmi	r3, [r6, #0]
 8000b96:	3302      	addmi	r3, #2
 8000b98:	6033      	strmi	r3, [r6, #0]
 8000b9a:	6825      	ldr	r5, [r4, #0]
 8000b9c:	f015 0506 	ands.w	r5, r5, #6
 8000ba0:	d106      	bne.n	8000bb0 <_printf_common+0x48>
 8000ba2:	f104 0a19 	add.w	sl, r4, #25
 8000ba6:	68e3      	ldr	r3, [r4, #12]
 8000ba8:	6832      	ldr	r2, [r6, #0]
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	42ab      	cmp	r3, r5
 8000bae:	dc26      	bgt.n	8000bfe <_printf_common+0x96>
 8000bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000bb4:	6822      	ldr	r2, [r4, #0]
 8000bb6:	3b00      	subs	r3, #0
 8000bb8:	bf18      	it	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	0692      	lsls	r2, r2, #26
 8000bbe:	d42b      	bmi.n	8000c18 <_printf_common+0xb0>
 8000bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bc4:	4641      	mov	r1, r8
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	47c8      	blx	r9
 8000bca:	3001      	adds	r0, #1
 8000bcc:	d01e      	beq.n	8000c0c <_printf_common+0xa4>
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	6922      	ldr	r2, [r4, #16]
 8000bd2:	f003 0306 	and.w	r3, r3, #6
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf02      	ittt	eq
 8000bda:	68e5      	ldreq	r5, [r4, #12]
 8000bdc:	6833      	ldreq	r3, [r6, #0]
 8000bde:	1aed      	subeq	r5, r5, r3
 8000be0:	68a3      	ldr	r3, [r4, #8]
 8000be2:	bf0c      	ite	eq
 8000be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000be8:	2500      	movne	r5, #0
 8000bea:	4293      	cmp	r3, r2
 8000bec:	bfc4      	itt	gt
 8000bee:	1a9b      	subgt	r3, r3, r2
 8000bf0:	18ed      	addgt	r5, r5, r3
 8000bf2:	2600      	movs	r6, #0
 8000bf4:	341a      	adds	r4, #26
 8000bf6:	42b5      	cmp	r5, r6
 8000bf8:	d11a      	bne.n	8000c30 <_printf_common+0xc8>
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e008      	b.n	8000c10 <_printf_common+0xa8>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	4652      	mov	r2, sl
 8000c02:	4641      	mov	r1, r8
 8000c04:	4638      	mov	r0, r7
 8000c06:	47c8      	blx	r9
 8000c08:	3001      	adds	r0, #1
 8000c0a:	d103      	bne.n	8000c14 <_printf_common+0xac>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c14:	3501      	adds	r5, #1
 8000c16:	e7c6      	b.n	8000ba6 <_printf_common+0x3e>
 8000c18:	18e1      	adds	r1, r4, r3
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	2030      	movs	r0, #48	@ 0x30
 8000c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c22:	4422      	add	r2, r4
 8000c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	e7c7      	b.n	8000bc0 <_printf_common+0x58>
 8000c30:	2301      	movs	r3, #1
 8000c32:	4622      	mov	r2, r4
 8000c34:	4641      	mov	r1, r8
 8000c36:	4638      	mov	r0, r7
 8000c38:	47c8      	blx	r9
 8000c3a:	3001      	adds	r0, #1
 8000c3c:	d0e6      	beq.n	8000c0c <_printf_common+0xa4>
 8000c3e:	3601      	adds	r6, #1
 8000c40:	e7d9      	b.n	8000bf6 <_printf_common+0x8e>
	...

08000c44 <_printf_i>:
 8000c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c48:	7e0f      	ldrb	r7, [r1, #24]
 8000c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c4c:	2f78      	cmp	r7, #120	@ 0x78
 8000c4e:	4691      	mov	r9, r2
 8000c50:	4680      	mov	r8, r0
 8000c52:	460c      	mov	r4, r1
 8000c54:	469a      	mov	sl, r3
 8000c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c5a:	d807      	bhi.n	8000c6c <_printf_i+0x28>
 8000c5c:	2f62      	cmp	r7, #98	@ 0x62
 8000c5e:	d80a      	bhi.n	8000c76 <_printf_i+0x32>
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	f000 80d2 	beq.w	8000e0a <_printf_i+0x1c6>
 8000c66:	2f58      	cmp	r7, #88	@ 0x58
 8000c68:	f000 80b9 	beq.w	8000dde <_printf_i+0x19a>
 8000c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c74:	e03a      	b.n	8000cec <_printf_i+0xa8>
 8000c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c7a:	2b15      	cmp	r3, #21
 8000c7c:	d8f6      	bhi.n	8000c6c <_printf_i+0x28>
 8000c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8000c84 <_printf_i+0x40>)
 8000c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c84:	08000cdd 	.word	0x08000cdd
 8000c88:	08000cf1 	.word	0x08000cf1
 8000c8c:	08000c6d 	.word	0x08000c6d
 8000c90:	08000c6d 	.word	0x08000c6d
 8000c94:	08000c6d 	.word	0x08000c6d
 8000c98:	08000c6d 	.word	0x08000c6d
 8000c9c:	08000cf1 	.word	0x08000cf1
 8000ca0:	08000c6d 	.word	0x08000c6d
 8000ca4:	08000c6d 	.word	0x08000c6d
 8000ca8:	08000c6d 	.word	0x08000c6d
 8000cac:	08000c6d 	.word	0x08000c6d
 8000cb0:	08000df1 	.word	0x08000df1
 8000cb4:	08000d1b 	.word	0x08000d1b
 8000cb8:	08000dab 	.word	0x08000dab
 8000cbc:	08000c6d 	.word	0x08000c6d
 8000cc0:	08000c6d 	.word	0x08000c6d
 8000cc4:	08000e13 	.word	0x08000e13
 8000cc8:	08000c6d 	.word	0x08000c6d
 8000ccc:	08000d1b 	.word	0x08000d1b
 8000cd0:	08000c6d 	.word	0x08000c6d
 8000cd4:	08000c6d 	.word	0x08000c6d
 8000cd8:	08000db3 	.word	0x08000db3
 8000cdc:	6833      	ldr	r3, [r6, #0]
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6032      	str	r2, [r6, #0]
 8000ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000cec:	2301      	movs	r3, #1
 8000cee:	e09d      	b.n	8000e2c <_printf_i+0x1e8>
 8000cf0:	6833      	ldr	r3, [r6, #0]
 8000cf2:	6820      	ldr	r0, [r4, #0]
 8000cf4:	1d19      	adds	r1, r3, #4
 8000cf6:	6031      	str	r1, [r6, #0]
 8000cf8:	0606      	lsls	r6, r0, #24
 8000cfa:	d501      	bpl.n	8000d00 <_printf_i+0xbc>
 8000cfc:	681d      	ldr	r5, [r3, #0]
 8000cfe:	e003      	b.n	8000d08 <_printf_i+0xc4>
 8000d00:	0645      	lsls	r5, r0, #25
 8000d02:	d5fb      	bpl.n	8000cfc <_printf_i+0xb8>
 8000d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	da03      	bge.n	8000d14 <_printf_i+0xd0>
 8000d0c:	232d      	movs	r3, #45	@ 0x2d
 8000d0e:	426d      	negs	r5, r5
 8000d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d14:	4859      	ldr	r0, [pc, #356]	@ (8000e7c <_printf_i+0x238>)
 8000d16:	230a      	movs	r3, #10
 8000d18:	e011      	b.n	8000d3e <_printf_i+0xfa>
 8000d1a:	6821      	ldr	r1, [r4, #0]
 8000d1c:	6833      	ldr	r3, [r6, #0]
 8000d1e:	0608      	lsls	r0, r1, #24
 8000d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d24:	d402      	bmi.n	8000d2c <_printf_i+0xe8>
 8000d26:	0649      	lsls	r1, r1, #25
 8000d28:	bf48      	it	mi
 8000d2a:	b2ad      	uxthmi	r5, r5
 8000d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d2e:	4853      	ldr	r0, [pc, #332]	@ (8000e7c <_printf_i+0x238>)
 8000d30:	6033      	str	r3, [r6, #0]
 8000d32:	bf14      	ite	ne
 8000d34:	230a      	movne	r3, #10
 8000d36:	2308      	moveq	r3, #8
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d3e:	6866      	ldr	r6, [r4, #4]
 8000d40:	60a6      	str	r6, [r4, #8]
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	bfa2      	ittt	ge
 8000d46:	6821      	ldrge	r1, [r4, #0]
 8000d48:	f021 0104 	bicge.w	r1, r1, #4
 8000d4c:	6021      	strge	r1, [r4, #0]
 8000d4e:	b90d      	cbnz	r5, 8000d54 <_printf_i+0x110>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d04b      	beq.n	8000dec <_printf_i+0x1a8>
 8000d54:	4616      	mov	r6, r2
 8000d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8000d5e:	5dc7      	ldrb	r7, [r0, r7]
 8000d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d64:	462f      	mov	r7, r5
 8000d66:	42bb      	cmp	r3, r7
 8000d68:	460d      	mov	r5, r1
 8000d6a:	d9f4      	bls.n	8000d56 <_printf_i+0x112>
 8000d6c:	2b08      	cmp	r3, #8
 8000d6e:	d10b      	bne.n	8000d88 <_printf_i+0x144>
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	07df      	lsls	r7, r3, #31
 8000d74:	d508      	bpl.n	8000d88 <_printf_i+0x144>
 8000d76:	6923      	ldr	r3, [r4, #16]
 8000d78:	6861      	ldr	r1, [r4, #4]
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	bfde      	ittt	le
 8000d7e:	2330      	movle	r3, #48	@ 0x30
 8000d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d84:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000d88:	1b92      	subs	r2, r2, r6
 8000d8a:	6122      	str	r2, [r4, #16]
 8000d8c:	f8cd a000 	str.w	sl, [sp]
 8000d90:	464b      	mov	r3, r9
 8000d92:	aa03      	add	r2, sp, #12
 8000d94:	4621      	mov	r1, r4
 8000d96:	4640      	mov	r0, r8
 8000d98:	f7ff fee6 	bl	8000b68 <_printf_common>
 8000d9c:	3001      	adds	r0, #1
 8000d9e:	d14a      	bne.n	8000e36 <_printf_i+0x1f2>
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da4:	b004      	add	sp, #16
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	4833      	ldr	r0, [pc, #204]	@ (8000e80 <_printf_i+0x23c>)
 8000db4:	2778      	movs	r7, #120	@ 0x78
 8000db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	6831      	ldr	r1, [r6, #0]
 8000dbe:	061f      	lsls	r7, r3, #24
 8000dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dc4:	d402      	bmi.n	8000dcc <_printf_i+0x188>
 8000dc6:	065f      	lsls	r7, r3, #25
 8000dc8:	bf48      	it	mi
 8000dca:	b2ad      	uxthmi	r5, r5
 8000dcc:	6031      	str	r1, [r6, #0]
 8000dce:	07d9      	lsls	r1, r3, #31
 8000dd0:	bf44      	itt	mi
 8000dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8000dd6:	6023      	strmi	r3, [r4, #0]
 8000dd8:	b11d      	cbz	r5, 8000de2 <_printf_i+0x19e>
 8000dda:	2310      	movs	r3, #16
 8000ddc:	e7ac      	b.n	8000d38 <_printf_i+0xf4>
 8000dde:	4827      	ldr	r0, [pc, #156]	@ (8000e7c <_printf_i+0x238>)
 8000de0:	e7e9      	b.n	8000db6 <_printf_i+0x172>
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	f023 0320 	bic.w	r3, r3, #32
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	e7f6      	b.n	8000dda <_printf_i+0x196>
 8000dec:	4616      	mov	r6, r2
 8000dee:	e7bd      	b.n	8000d6c <_printf_i+0x128>
 8000df0:	6833      	ldr	r3, [r6, #0]
 8000df2:	6825      	ldr	r5, [r4, #0]
 8000df4:	6961      	ldr	r1, [r4, #20]
 8000df6:	1d18      	adds	r0, r3, #4
 8000df8:	6030      	str	r0, [r6, #0]
 8000dfa:	062e      	lsls	r6, r5, #24
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	d501      	bpl.n	8000e04 <_printf_i+0x1c0>
 8000e00:	6019      	str	r1, [r3, #0]
 8000e02:	e002      	b.n	8000e0a <_printf_i+0x1c6>
 8000e04:	0668      	lsls	r0, r5, #25
 8000e06:	d5fb      	bpl.n	8000e00 <_printf_i+0x1bc>
 8000e08:	8019      	strh	r1, [r3, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	6123      	str	r3, [r4, #16]
 8000e0e:	4616      	mov	r6, r2
 8000e10:	e7bc      	b.n	8000d8c <_printf_i+0x148>
 8000e12:	6833      	ldr	r3, [r6, #0]
 8000e14:	1d1a      	adds	r2, r3, #4
 8000e16:	6032      	str	r2, [r6, #0]
 8000e18:	681e      	ldr	r6, [r3, #0]
 8000e1a:	6862      	ldr	r2, [r4, #4]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff f9fe 	bl	8000220 <memchr>
 8000e24:	b108      	cbz	r0, 8000e2a <_printf_i+0x1e6>
 8000e26:	1b80      	subs	r0, r0, r6
 8000e28:	6060      	str	r0, [r4, #4]
 8000e2a:	6863      	ldr	r3, [r4, #4]
 8000e2c:	6123      	str	r3, [r4, #16]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e34:	e7aa      	b.n	8000d8c <_printf_i+0x148>
 8000e36:	6923      	ldr	r3, [r4, #16]
 8000e38:	4632      	mov	r2, r6
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	47d0      	blx	sl
 8000e40:	3001      	adds	r0, #1
 8000e42:	d0ad      	beq.n	8000da0 <_printf_i+0x15c>
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	079b      	lsls	r3, r3, #30
 8000e48:	d413      	bmi.n	8000e72 <_printf_i+0x22e>
 8000e4a:	68e0      	ldr	r0, [r4, #12]
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	bfb8      	it	lt
 8000e52:	4618      	movlt	r0, r3
 8000e54:	e7a6      	b.n	8000da4 <_printf_i+0x160>
 8000e56:	2301      	movs	r3, #1
 8000e58:	4632      	mov	r2, r6
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	47d0      	blx	sl
 8000e60:	3001      	adds	r0, #1
 8000e62:	d09d      	beq.n	8000da0 <_printf_i+0x15c>
 8000e64:	3501      	adds	r5, #1
 8000e66:	68e3      	ldr	r3, [r4, #12]
 8000e68:	9903      	ldr	r1, [sp, #12]
 8000e6a:	1a5b      	subs	r3, r3, r1
 8000e6c:	42ab      	cmp	r3, r5
 8000e6e:	dcf2      	bgt.n	8000e56 <_printf_i+0x212>
 8000e70:	e7eb      	b.n	8000e4a <_printf_i+0x206>
 8000e72:	2500      	movs	r5, #0
 8000e74:	f104 0619 	add.w	r6, r4, #25
 8000e78:	e7f5      	b.n	8000e66 <_printf_i+0x222>
 8000e7a:	bf00      	nop
 8000e7c:	08000f98 	.word	0x08000f98
 8000e80:	08000fa9 	.word	0x08000fa9

08000e84 <memmove>:
 8000e84:	4288      	cmp	r0, r1
 8000e86:	b510      	push	{r4, lr}
 8000e88:	eb01 0402 	add.w	r4, r1, r2
 8000e8c:	d902      	bls.n	8000e94 <memmove+0x10>
 8000e8e:	4284      	cmp	r4, r0
 8000e90:	4623      	mov	r3, r4
 8000e92:	d807      	bhi.n	8000ea4 <memmove+0x20>
 8000e94:	1e43      	subs	r3, r0, #1
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	d008      	beq.n	8000eac <memmove+0x28>
 8000e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000ea2:	e7f8      	b.n	8000e96 <memmove+0x12>
 8000ea4:	4402      	add	r2, r0
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d100      	bne.n	8000eae <memmove+0x2a>
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000eb6:	e7f7      	b.n	8000ea8 <memmove+0x24>

08000eb8 <_sbrk_r>:
 8000eb8:	b538      	push	{r3, r4, r5, lr}
 8000eba:	4d06      	ldr	r5, [pc, #24]	@ (8000ed4 <_sbrk_r+0x1c>)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	602b      	str	r3, [r5, #0]
 8000ec4:	f7ff fa88 	bl	80003d8 <_sbrk>
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	d102      	bne.n	8000ed2 <_sbrk_r+0x1a>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	b103      	cbz	r3, 8000ed2 <_sbrk_r+0x1a>
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	bd38      	pop	{r3, r4, r5, pc}
 8000ed4:	200001ac 	.word	0x200001ac

08000ed8 <memcpy>:
 8000ed8:	440a      	add	r2, r1
 8000eda:	4291      	cmp	r1, r2
 8000edc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000ee0:	d100      	bne.n	8000ee4 <memcpy+0xc>
 8000ee2:	4770      	bx	lr
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000eee:	4291      	cmp	r1, r2
 8000ef0:	d1f9      	bne.n	8000ee6 <memcpy+0xe>
 8000ef2:	bd10      	pop	{r4, pc}

08000ef4 <_realloc_r>:
 8000ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef8:	4680      	mov	r8, r0
 8000efa:	4615      	mov	r5, r2
 8000efc:	460c      	mov	r4, r1
 8000efe:	b921      	cbnz	r1, 8000f0a <_realloc_r+0x16>
 8000f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f04:	4611      	mov	r1, r2
 8000f06:	f7ff bc4b 	b.w	80007a0 <_malloc_r>
 8000f0a:	b92a      	cbnz	r2, 8000f18 <_realloc_r+0x24>
 8000f0c:	f7ff fbdc 	bl	80006c8 <_free_r>
 8000f10:	2400      	movs	r4, #0
 8000f12:	4620      	mov	r0, r4
 8000f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f18:	f000 f81a 	bl	8000f50 <_malloc_usable_size_r>
 8000f1c:	4285      	cmp	r5, r0
 8000f1e:	4606      	mov	r6, r0
 8000f20:	d802      	bhi.n	8000f28 <_realloc_r+0x34>
 8000f22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f26:	d8f4      	bhi.n	8000f12 <_realloc_r+0x1e>
 8000f28:	4629      	mov	r1, r5
 8000f2a:	4640      	mov	r0, r8
 8000f2c:	f7ff fc38 	bl	80007a0 <_malloc_r>
 8000f30:	4607      	mov	r7, r0
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d0ec      	beq.n	8000f10 <_realloc_r+0x1c>
 8000f36:	42b5      	cmp	r5, r6
 8000f38:	462a      	mov	r2, r5
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	bf28      	it	cs
 8000f3e:	4632      	movcs	r2, r6
 8000f40:	f7ff ffca 	bl	8000ed8 <memcpy>
 8000f44:	4621      	mov	r1, r4
 8000f46:	4640      	mov	r0, r8
 8000f48:	f7ff fbbe 	bl	80006c8 <_free_r>
 8000f4c:	463c      	mov	r4, r7
 8000f4e:	e7e0      	b.n	8000f12 <_realloc_r+0x1e>

08000f50 <_malloc_usable_size_r>:
 8000f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f54:	1f18      	subs	r0, r3, #4
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bfbc      	itt	lt
 8000f5a:	580b      	ldrlt	r3, [r1, r0]
 8000f5c:	18c0      	addlt	r0, r0, r3
 8000f5e:	4770      	bx	lr

08000f60 <_init>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr

08000f6c <_fini>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr
