
assignment_day9_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001504  08001504  00002504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001550  08001550  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001550  08001550  00002550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001558  08001558  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001558  08001558  00002558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800155c  0800155c  0000255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001560  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019c6  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000094b  00000000  00000000  00004a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00005390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000139  00000000  00000000  00005560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019641  00000000  00000000  00005699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000024e7  00000000  00000000  0001ecda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c0ba  00000000  00000000  000211c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad27b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a38  00000000  00000000  000ad2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000adcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007f  00000000  00000000  000add17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000054 	.word	0x20000054
 80001fc:	00000000 	.word	0x00000000
 8000200:	080014ec 	.word	0x080014ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000058 	.word	0x20000058
 800021c:	080014ec 	.word	0x080014ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <DelayMs+0x44>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <DelayMs+0x48>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <DelayMs+0x4c>)
 80002d4:	fba2 2303 	umull	r2, r3, r2, r3
 80002d8:	099b      	lsrs	r3, r3, #6
 80002da:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	fb02 f303 	mul.w	r3, r2, r3
 80002e4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002e6:	bf00      	nop
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <DelayMs+0x44>)
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	1ad2      	subs	r2, r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d3f8      	bcc.n	80002e8 <DelayMs+0x28>
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e0001000 	.word	0xe0001000
 8000308:	20000000 	.word	0x20000000
 800030c:	10624dd3 	.word	0x10624dd3

08000310 <SPI_WriteIO>:

#include"accel.h"
#include"spi.h"

void SPI_WriteIO(uint8_t regr, uint8_t data[], uint8_t size)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	4613      	mov	r3, r2
 800031e:	71bb      	strb	r3, [r7, #6]
	SPI_CS_Enable();
 8000320:	f000 fb6a 	bl	80009f8 <SPI_CS_Enable>
	regr &=~BV(7);
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800032a:	71fb      	strb	r3, [r7, #7]
	SPI_Transmit(regr);
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	b29b      	uxth	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fb7d 	bl	8000a30 <SPI_Transmit>
	for(int i=0;i<size;i++)
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	e009      	b.n	8000350 <SPI_WriteIO+0x40>
	SPI_Transmit(data[i]);
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fb73 	bl	8000a30 <SPI_Transmit>
	for(int i=0;i<size;i++)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf1      	blt.n	800033c <SPI_WriteIO+0x2c>
    SPI_CS_Disable();
 8000358:	f000 fb5c 	bl	8000a14 <SPI_CS_Disable>
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <SPI_ReadIO>:

void SPI_ReadIO(uint8_t regr, uint8_t data[], uint8_t size)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
  SPI_CS_Enable();
 8000374:	f000 fb40 	bl	80009f8 <SPI_CS_Enable>
  regr |=BV(7);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037e:	71fb      	strb	r3, [r7, #7]
  SPI_Transmit(regr);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	b29b      	uxth	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fb53 	bl	8000a30 <SPI_Transmit>
  for(int i=0;i<size;i++)
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	e00b      	b.n	80003a8 <SPI_ReadIO+0x44>
  data[i]=SPI_Receive();
 8000390:	f000 fb70 	bl	8000a74 <SPI_Receive>
 8000394:	4603      	mov	r3, r0
 8000396:	4619      	mov	r1, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	4413      	add	r3, r2
 800039e:	b2ca      	uxtb	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<size;i++)
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	3301      	adds	r3, #1
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	79bb      	ldrb	r3, [r7, #6]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbef      	blt.n	8000390 <SPI_ReadIO+0x2c>
  SPI_CS_Disable();
 80003b0:	f000 fb30 	bl	8000a14 <SPI_CS_Disable>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <LIS_Init>:

void LIS_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
  SPI_Init();
 80003c2:	f000 fab3 	bl	800092c <SPI_Init>
  DelayMs(3);
 80003c6:	2003      	movs	r0, #3
 80003c8:	f7ff ff7a 	bl	80002c0 <DelayMs>
  uint8_t config = LIS_CR4_RATE_25 | LIS_CR4_XYZ_EN;
 80003cc:	2347      	movs	r3, #71	@ 0x47
 80003ce:	71fb      	strb	r3, [r7, #7]
  SPI_WriteIO(LIS_CR4_ADDR ,&config, 1);
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	2201      	movs	r2, #1
 80003d4:	4619      	mov	r1, r3
 80003d6:	2020      	movs	r0, #32
 80003d8:	f7ff ff9a 	bl	8000310 <SPI_WriteIO>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LIS_IsDataAvail>:

int LIS_IsDataAvail(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	uint8_t status;
	do
	{
	SPI_ReadIO(LIS_STATUS_ADDR,&status,1);
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	2201      	movs	r2, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	2027      	movs	r0, #39	@ 0x27
 80003f2:	f7ff ffb7 	bl	8000364 <SPI_ReadIO>
	}
   while(!(status &LIS_SR_XYZDA));
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f4      	beq.n	80003ea <LIS_IsDataAvail+0x6>
	return 1;
 8000400:	2301      	movs	r3, #1
}
 8000402:	4618      	mov	r0, r3
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <LIS_GetData>:

LIS_Data LIS_GetData(void)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b086      	sub	sp, #24
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 uint8_t data[2];
 LIS_Data val;

 SPI_ReadIO(LIS_XL_ADDR,data,2);
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	2202      	movs	r2, #2
 8000418:	4619      	mov	r1, r3
 800041a:	2028      	movs	r0, #40	@ 0x28
 800041c:	f7ff ffa2 	bl	8000364 <SPI_ReadIO>
 val.x=((uint8_t)data[1]<<8)|data[0];
 8000420:	7d7b      	ldrb	r3, [r7, #21]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	b21a      	sxth	r2, r3
 8000426:	7d3b      	ldrb	r3, [r7, #20]
 8000428:	b21b      	sxth	r3, r3
 800042a:	4313      	orrs	r3, r2
 800042c:	b21b      	sxth	r3, r3
 800042e:	81bb      	strh	r3, [r7, #12]

 SPI_ReadIO(LIS_YL_ADDR,data,2);
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2202      	movs	r2, #2
 8000436:	4619      	mov	r1, r3
 8000438:	202a      	movs	r0, #42	@ 0x2a
 800043a:	f7ff ff93 	bl	8000364 <SPI_ReadIO>
 val.y=((uint8_t)data[1]<<8)|data[0];
 800043e:	7d7b      	ldrb	r3, [r7, #21]
 8000440:	021b      	lsls	r3, r3, #8
 8000442:	b21a      	sxth	r2, r3
 8000444:	7d3b      	ldrb	r3, [r7, #20]
 8000446:	b21b      	sxth	r3, r3
 8000448:	4313      	orrs	r3, r2
 800044a:	b21b      	sxth	r3, r3
 800044c:	81fb      	strh	r3, [r7, #14]

 SPI_ReadIO(LIS_ZL_ADDR,data,2);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2202      	movs	r2, #2
 8000454:	4619      	mov	r1, r3
 8000456:	202c      	movs	r0, #44	@ 0x2c
 8000458:	f7ff ff84 	bl	8000364 <SPI_ReadIO>
 val.z=((uint8_t)data[1]<<8)|data[0];
 800045c:	7d7b      	ldrb	r3, [r7, #21]
 800045e:	021b      	lsls	r3, r3, #8
 8000460:	b21a      	sxth	r2, r3
 8000462:	7d3b      	ldrb	r3, [r7, #20]
 8000464:	b21b      	sxth	r3, r3
 8000466:	4313      	orrs	r3, r2
 8000468:	b21b      	sxth	r3, r3
 800046a:	823b      	strh	r3, [r7, #16]

  return val;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	461a      	mov	r2, r3
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	6818      	ldr	r0, [r3, #0]
 8000476:	6010      	str	r0, [r2, #0]
 8000478:	889b      	ldrh	r3, [r3, #4]
 800047a:	8093      	strh	r3, [r2, #4]
}
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <I2C_Init>:
Date: Sep 24, 2024
*/

#include "i2c.h"

void I2C_Init(void) {
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	// PB6, PB7 -- GPIO Init -- MODER, AFRL, PUPDR, CLKEN
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000488:	4b2c      	ldr	r3, [pc, #176]	@ (800053c <I2C_Init+0xb8>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a2b      	ldr	r2, [pc, #172]	@ (800053c <I2C_Init+0xb8>)
 800048e:	f043 0302 	orr.w	r3, r3, #2
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= (BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1));
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <I2C_Init+0xbc>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a29      	ldr	r2, [pc, #164]	@ (8000540 <I2C_Init+0xbc>)
 800049a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800049e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(SCL_PIN*2) | BV(SDA_PIN*2));
 80004a0:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <I2C_Init+0xbc>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a26      	ldr	r2, [pc, #152]	@ (8000540 <I2C_Init+0xbc>)
 80004a6:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80004aa:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1) | BV(SCL_PIN*2) | BV(SDA_PIN*2)); // no pull-up/down
 80004ac:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <I2C_Init+0xbc>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a23      	ldr	r2, [pc, #140]	@ (8000540 <I2C_Init+0xbc>)
 80004b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80004b6:	60d3      	str	r3, [r2, #12]
    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= BV(30) | BV(26);
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <I2C_Init+0xbc>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a20      	ldr	r2, [pc, #128]	@ (8000540 <I2C_Init+0xbc>)
 80004be:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80004c2:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] &= ~(BV(31) | BV(29) | BV(28) | BV(27) | BV(25) | BV(24));
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <I2C_Init+0xbc>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000540 <I2C_Init+0xbc>)
 80004ca:	f023 433b 	bic.w	r3, r3, #3137339392	@ 0xbb000000
 80004ce:	6213      	str	r3, [r2, #32]

	// I2C1 Init -- CR1, CR2, CCR, TRISE, CLKEN
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <I2C_Init+0xb8>)
 80004d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d4:	4a19      	ldr	r2, [pc, #100]	@ (800053c <I2C_Init+0xb8>)
 80004d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004da:	6413      	str	r3, [r2, #64]	@ 0x40
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 80004dc:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <I2C_Init+0xc0>)
 80004de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004e2:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 80004e4:	4b17      	ldr	r3, [pc, #92]	@ (8000544 <I2C_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
    // set pclk in CR2 (16 MHz)
    I2C1->CR2 |= 16;
 80004ea:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <I2C_Init+0xc0>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4a15      	ldr	r2, [pc, #84]	@ (8000544 <I2C_Init+0xc0>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6053      	str	r3, [r2, #4]
    // set i2c bitrate to 100KHz (std mode)
    I2C1->CCR &= ~I2C_CCR_FS; // change mode to standard mode
 80004f6:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <I2C_Init+0xc0>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a12      	ldr	r2, [pc, #72]	@ (8000544 <I2C_Init+0xc0>)
 80004fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000500:	61d3      	str	r3, [r2, #28]
    I2C1->CCR |= 80;			// CCR = Ton / Tpclk = 5 / 0.0625 = 80
 8000502:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <I2C_Init+0xc0>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a0f      	ldr	r2, [pc, #60]	@ (8000544 <I2C_Init+0xc0>)
 8000508:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800050c:	61d3      	str	r3, [r2, #28]
    // standard mode Max Trise = 1000 ns
    // set Trise = Max Trise / Tpclk = 1000 / 62.5 = 17
    I2C1->TRISE |= 17;
 800050e:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <I2C_Init+0xc0>)
 8000510:	6a1b      	ldr	r3, [r3, #32]
 8000512:	4a0c      	ldr	r2, [pc, #48]	@ (8000544 <I2C_Init+0xc0>)
 8000514:	f043 0311 	orr.w	r3, r3, #17
 8000518:	6213      	str	r3, [r2, #32]
    // Enable Ack
    I2C1->CR1 |= I2C_CR1_ACK;
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <I2C_Init+0xc0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <I2C_Init+0xc0>)
 8000520:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000524:	6013      	str	r3, [r2, #0]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <I2C_Init+0xc0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <I2C_Init+0xc0>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800
 8000540:	40020400 	.word	0x40020400
 8000544:	40005400 	.word	0x40005400

08000548 <I2C_Start>:

void I2C_Start(void) {
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	// CR1 -- send start bit
    I2C1->CR1 |= I2C_CR1_START;
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <I2C_Start+0x28>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <I2C_Start+0x28>)
 8000552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000556:	6013      	str	r3, [r2, #0]
	// SR1 -- poll for SB (start bit sent)
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000558:	bf00      	nop
 800055a:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <I2C_Start+0x28>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f9      	beq.n	800055a <I2C_Start+0x12>
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40005400 	.word	0x40005400

08000574 <I2C_Stop>:
void I2C_RepeatStart(void) {
	I2C_Start();
}
void I2C_Stop(void) {
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	// CR1 -- send stop bit
    I2C1->CR1 |= I2C_CR1_STOP;
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <I2C_Stop+0x28>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a07      	ldr	r2, [pc, #28]	@ (800059c <I2C_Stop+0x28>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000582:	6013      	str	r3, [r2, #0]
    // SR2 -- poll for bus to be release
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000584:	bf00      	nop
 8000586:	4b05      	ldr	r3, [pc, #20]	@ (800059c <I2C_Stop+0x28>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <I2C_Stop+0x12>
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40005400 	.word	0x40005400

080005a0 <I2C_SendSlaveAddr>:
void I2C_SendSlaveAddr(uint8_t slaveAddr) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	// DR -- write slave addr in data regr
    I2C1->DR = slaveAddr;
 80005aa:	4a09      	ldr	r2, [pc, #36]	@ (80005d0 <I2C_SendSlaveAddr+0x30>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for addr is transferred
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80005b0:	bf00      	nop
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <I2C_SendSlaveAddr+0x30>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <I2C_SendSlaveAddr+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <I2C_SendSlaveAddr+0x30>)
 80005c0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80005c2:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <I2C_SendSlaveAddr+0x30>)
 80005c4:	699b      	ldr	r3, [r3, #24]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40005400 	.word	0x40005400

080005d4 <I2C_SendData>:
void I2C_SendData(uint8_t data) {
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	// SR1 -- wait while previous data is not transmitted
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 80005de:	bf00      	nop
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <I2C_SendData+0x38>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f9      	beq.n	80005e0 <I2C_SendData+0xc>
	// DR -- write data in data regr
    I2C1->DR = data;
 80005ec:	4a07      	ldr	r2, [pc, #28]	@ (800060c <I2C_SendData+0x38>)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80005f2:	bf00      	nop
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <I2C_SendData+0x38>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f9      	beq.n	80005f4 <I2C_SendData+0x20>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40005400 	.word	0x40005400

08000610 <I2C_IsDeviceReady>:
	// read content and clear flags
	uint16_t val = I2C1->DR;
	return val;
}

int I2C_IsDeviceReady(uint8_t slaveAddr) {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	// DR -- write slave addr in data regr
    I2C1->DR = slaveAddr;
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <I2C_IsDeviceReady+0x34>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6113      	str	r3, [r2, #16]
	// SR1 -- poll for addr is transferred
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000620:	bf00      	nop
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <I2C_IsDeviceReady+0x34>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <I2C_IsDeviceReady+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800062e:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <I2C_IsDeviceReady+0x34>)
 8000630:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000632:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <I2C_IsDeviceReady+0x34>)
 8000634:	699b      	ldr	r3, [r3, #24]
    return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40005400 	.word	0x40005400

08000648 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <DelayMs+0x44>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <DelayMs+0x48>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <DelayMs+0x4c>)
 800065c:	fba2 2303 	umull	r2, r3, r2, r3
 8000660:	099b      	lsrs	r3, r3, #6
 8000662:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800066e:	bf00      	nop
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <DelayMs+0x44>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d3f8      	bcc.n	8000670 <DelayMs+0x28>
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e0001000 	.word	0xe0001000
 8000690:	20000000 	.word	0x20000000
 8000694:	10624dd3 	.word	0x10624dd3

08000698 <Lcd_Write4BitAndCtrl>:
 *      Author: Nilesh
 */

#include "i2c_lcd.h"

void Lcd_Write4BitAndCtrl(uint8_t val) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 80006a2:	f7ff ff51 	bl	8000548 <I2C_Start>
	I2C_SendSlaveAddr(LCD_SLAVE_ADDR_W);
 80006a6:	204e      	movs	r0, #78	@ 0x4e
 80006a8:	f7ff ff7a 	bl	80005a0 <I2C_SendSlaveAddr>
	I2C_SendData(val);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff90 	bl	80005d4 <I2C_SendData>
	I2C_Stop();
 80006b4:	f7ff ff5e 	bl	8000574 <I2C_Stop>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Lcd_WriteByte>:

void Lcd_WriteByte(uint8_t rs, uint8_t val) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	f023 030f 	bic.w	r3, r3, #15
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b80      	cmp	r3, #128	@ 0x80
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	737b      	strb	r3, [r7, #13]
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f043 030c 	orr.w	r3, r3, #12
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffcc 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffa1 	bl	8000648 <DelayMs>
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_BL));
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	7b7b      	ldrb	r3, [r7, #13]
 800070a:	4313      	orrs	r3, r2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffbf 	bl	8000698 <Lcd_Write4BitAndCtrl>

	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 800071a:	7bba      	ldrb	r2, [r7, #14]
 800071c:	7b7b      	ldrb	r3, [r7, #13]
 800071e:	4313      	orrs	r3, r2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f043 030c 	orr.w	r3, r3, #12
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffb5 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff ff8a 	bl	8000648 <DelayMs>
	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_BL));
 8000734:	7bba      	ldrb	r2, [r7, #14]
 8000736:	7b7b      	ldrb	r3, [r7, #13]
 8000738:	4313      	orrs	r3, r2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffa8 	bl	8000698 <Lcd_Write4BitAndCtrl>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Lcd_Init>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int Lcd_Init() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 8000756:	2014      	movs	r0, #20
 8000758:	f7ff ff76 	bl	8000648 <DelayMs>
	I2C_Init();
 800075c:	f7ff fe92 	bl	8000484 <I2C_Init>
	// check if lcd is ready
	I2C_Start();
 8000760:	f7ff fef2 	bl	8000548 <I2C_Start>
	int ret = I2C_IsDeviceReady(LCD_SLAVE_ADDR_W);
 8000764:	204e      	movs	r0, #78	@ 0x4e
 8000766:	f7ff ff53 	bl	8000610 <I2C_IsDeviceReady>
 800076a:	6078      	str	r0, [r7, #4]
	I2C_Stop();
 800076c:	f7ff ff02 	bl	8000574 <I2C_Stop>
	if(!ret)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <Lcd_Init+0x2a>
		return 0;
 8000776:	2300      	movs	r3, #0
 8000778:	e04a      	b.n	8000810 <Lcd_Init+0xc0>

	// attention sequence
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800077a:	2034      	movs	r0, #52	@ 0x34
 800077c:	f7ff ff8c 	bl	8000698 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000780:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000782:	2030      	movs	r0, #48	@ 0x30
 8000784:	f7ff ff88 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(5);
 8000788:	2005      	movs	r0, #5
 800078a:	f7ff ff5d 	bl	8000648 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 800078e:	2034      	movs	r0, #52	@ 0x34
 8000790:	f7ff ff82 	bl	8000698 <Lcd_Write4BitAndCtrl>
	__NOP();
 8000794:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 8000796:	2030      	movs	r0, #48	@ 0x30
 8000798:	f7ff ff7e 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff53 	bl	8000648 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT | BV(LCD_EN));
 80007a2:	2034      	movs	r0, #52	@ 0x34
 80007a4:	f7ff ff78 	bl	8000698 <Lcd_Write4BitAndCtrl>
	__NOP();
 80007a8:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_8BIT);
 80007aa:	2030      	movs	r0, #48	@ 0x30
 80007ac:	f7ff ff74 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f7ff ff49 	bl	8000648 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT | BV(LCD_EN));
 80007b6:	2024      	movs	r0, #36	@ 0x24
 80007b8:	f7ff ff6e 	bl	8000698 <Lcd_Write4BitAndCtrl>
	__NOP();
 80007bc:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT);
 80007be:	2020      	movs	r0, #32
 80007c0:	f7ff ff6a 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff3f 	bl	8000648 <DelayMs>

	// lcd initialization
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT_2LINES);
 80007ca:	2028      	movs	r0, #40	@ 0x28
 80007cc:	f7ff ff64 	bl	8000698 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ff39 	bl	8000648 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_CTRL);
 80007d6:	2108      	movs	r1, #8
 80007d8:	2080      	movs	r0, #128	@ 0x80
 80007da:	f7ff ff71 	bl	80006c0 <Lcd_WriteByte>
	DelayMs(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff32 	bl	8000648 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_CLEAR);
 80007e4:	2101      	movs	r1, #1
 80007e6:	2080      	movs	r0, #128	@ 0x80
 80007e8:	f7ff ff6a 	bl	80006c0 <Lcd_WriteByte>
	DelayMs(1);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff ff2b 	bl	8000648 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_ENTRY_MODE);
 80007f2:	2106      	movs	r1, #6
 80007f4:	2080      	movs	r0, #128	@ 0x80
 80007f6:	f7ff ff63 	bl	80006c0 <Lcd_WriteByte>
	DelayMs(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff ff24 	bl	8000648 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_ON);
 8000800:	210c      	movs	r1, #12
 8000802:	2080      	movs	r0, #128	@ 0x80
 8000804:	f7ff ff5c 	bl	80006c0 <Lcd_WriteByte>
	DelayMs(1);
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff1d 	bl	8000648 <DelayMs>
	return ret;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Lcd_Puts>:

void Lcd_Puts(uint8_t line, char str[]) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
	int i;
	Lcd_WriteByte(LCD_CMD, line); // line address
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4619      	mov	r1, r3
 8000828:	2080      	movs	r0, #128	@ 0x80
 800082a:	f7ff ff49 	bl	80006c0 <Lcd_WriteByte>
	DelayMs(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff0a 	bl	8000648 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	e00a      	b.n	8000850 <Lcd_Puts+0x38>
		Lcd_WriteByte(LCD_DATA, str[i]);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4619      	mov	r1, r3
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff ff3b 	bl	80006c0 <Lcd_WriteByte>
	for(i=0; str[i]!='\0'; i++)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ee      	bne.n	800083a <Lcd_Puts+0x22>
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <DelayMs+0x44>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <DelayMs+0x48>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <DelayMs+0x4c>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	099b      	lsrs	r3, r3, #6
 8000882:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800088e:	bf00      	nop
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <DelayMs+0x44>)
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	d3f8      	bcc.n	8000890 <DelayMs+0x28>
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e0001000 	.word	0xe0001000
 80008b0:	20000000 	.word	0x20000000
 80008b4:	10624dd3 	.word	0x10624dd3

080008b8 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b092      	sub	sp, #72	@ 0x48
 80008bc:	af00      	add	r7, sp, #0
	char str[32];
	char str1[32];
	LIS_Data val;
	SystemInit();
 80008be:	f000 f91d 	bl	8000afc <SystemInit>
	Lcd_Init();	 // initialize uart
 80008c2:	f7ff ff45 	bl	8000750 <Lcd_Init>
//	Lcd_Puts(LCD_LINE1,"LIS3DSH Demo!\r\n");
	LIS_Init(); //initialize accel
 80008c6:	f7ff fd79 	bl	80003bc <LIS_Init>
	while(1) {
		if(LIS_IsDataAvail()) // check if new data avail
 80008ca:	f7ff fd8b 	bl	80003e4 <LIS_IsDataAvail>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d022      	beq.n	800091a <main+0x62>
		{
			val = LIS_GetData(); // get the new data
 80008d4:	463b      	mov	r3, r7
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fd97 	bl	800040a <LIS_GetData>
			// print value
			sprintf(str, "X=%d, Y=%d\r\n", val.x, val.y);
 80008dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008e0:	461a      	mov	r2, r3
 80008e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008e6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80008ea:	490e      	ldr	r1, [pc, #56]	@ (8000924 <main+0x6c>)
 80008ec:	f000 f966 	bl	8000bbc <siprintf>
			sprintf(str1, "z=%d\r\n", val.z);
 80008f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	490b      	ldr	r1, [pc, #44]	@ (8000928 <main+0x70>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f95d 	bl	8000bbc <siprintf>
			Lcd_Puts(LCD_LINE1,str);
 8000902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000906:	4619      	mov	r1, r3
 8000908:	2080      	movs	r0, #128	@ 0x80
 800090a:	f7ff ff85 	bl	8000818 <Lcd_Puts>
			Lcd_Puts(LCD_LINE2,str1);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	20c0      	movs	r0, #192	@ 0xc0
 8000916:	f7ff ff7f 	bl	8000818 <Lcd_Puts>
		}
		DelayMs(1000);
 800091a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800091e:	f7ff ffa3 	bl	8000868 <DelayMs>
		if(LIS_IsDataAvail()) // check if new data avail
 8000922:	e7d2      	b.n	80008ca <main+0x12>
 8000924:	08001504 	.word	0x08001504
 8000928:	08001514 	.word	0x08001514

0800092c <SPI_Init>:
 */

#include "spi.h"

void SPI_Init(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
 // GPIOE  initialization

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000930:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <SPI_Init+0xbc>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	4a2c      	ldr	r2, [pc, #176]	@ (80009e8 <SPI_Init+0xbc>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOE->MODER |=BV(SPI_CS_PIN*2);
 800093c:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <SPI_Init+0xc0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a2a      	ldr	r2, [pc, #168]	@ (80009ec <SPI_Init+0xc0>)
 8000942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000946:	6013      	str	r3, [r2, #0]
    GPIOE->MODER &=~BV(SPI_CS_PIN*2+1);
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <SPI_Init+0xc0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a27      	ldr	r2, [pc, #156]	@ (80009ec <SPI_Init+0xc0>)
 800094e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000952:	6013      	str	r3, [r2, #0]

    //SET OSPEER=00
    GPIOE->OSPEEDR &=~BV(SPI_CS_PIN*2)|BV(SPI_CS_PIN*2+1);
 8000954:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <SPI_Init+0xc0>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	4a24      	ldr	r2, [pc, #144]	@ (80009ec <SPI_Init+0xc0>)
 800095a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800095e:	6093      	str	r3, [r2, #8]
    //SET OTYPER=0 (PUSH PULL)
    GPIOE->OTYPER &=~BV(SPI_CS_PIN);
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <SPI_Init+0xc0>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a21      	ldr	r2, [pc, #132]	@ (80009ec <SPI_Init+0xc0>)
 8000966:	f023 0308 	bic.w	r3, r3, #8
 800096a:	6053      	str	r3, [r2, #4]
    //NO PUSH AND PULL-UP
    GPIOE->PUPDR &=~BV(SPI_CS_PIN*2)|BV(SPI_CS_PIN*2+1);
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <SPI_Init+0xc0>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	4a1e      	ldr	r2, [pc, #120]	@ (80009ec <SPI_Init+0xc0>)
 8000972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000976:	60d3      	str	r3, [r2, #12]

    //GPIOA(SPI) INITIALIZATION
    	RCC->AHB1ENR |=RCC_AHB1ENR_GPIOAEN;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <SPI_Init+0xbc>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097c:	4a1a      	ldr	r2, [pc, #104]	@ (80009e8 <SPI_Init+0xbc>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6313      	str	r3, [r2, #48]	@ 0x30
    	//SET MODER
    	GPIOA->MODER &=~BV(SPI_SCLK_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_MOSI_PIN*2);
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <SPI_Init+0xc4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <SPI_Init+0xc4>)
 800098a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800098e:	6013      	str	r3, [r2, #0]
    	GPIOA->MODER |=BV(SPI_SCLK_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_MOSI_PIN*2+1);
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <SPI_Init+0xc4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <SPI_Init+0xc4>)
 8000996:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800099a:	6013      	str	r3, [r2, #0]
      //SELECT ALT FN AF5=0101
    	GPIOA->AFR[0] &=~ BV(31)|BV(29)|BV(27)|BV(25)|BV(23)|BV(21);
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <SPI_Init+0xc4>)
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <SPI_Init+0xc4>)
 80009a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80009a6:	6213      	str	r3, [r2, #32]
    	GPIOA->AFR[0] |=BV(30)|BV(28)|BV(26)|BV(24)|BV(22)|BV(20);
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <SPI_Init+0xc4>)
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <SPI_Init+0xc4>)
 80009ae:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80009b2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80009b6:	6213      	str	r3, [r2, #32]

    //SPI initialization
    	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <SPI_Init+0xbc>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <SPI_Init+0xbc>)
 80009be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c2:	6453      	str	r3, [r2, #68]	@ 0x44

    	SPI1->CR1=SPI_CR1_MSTR | SPI_CR1_SSM |SPI_CR1_SSI |SPI_CR1_BR_1;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <SPI_Init+0xc8>)
 80009c6:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80009ca:	601a      	str	r2, [r3, #0]
    	//CR2...DISABLE INTRRUPTS
    	SPI1->CR2 |= 0x0000;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <SPI_Init+0xc8>)
 80009ce:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <SPI_Init+0xc8>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	6053      	str	r3, [r2, #4]
    	SPI1->CR1 |=SPI_CR1_SPE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <SPI_Init+0xc8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <SPI_Init+0xc8>)
 80009da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009de:	6013      	str	r3, [r2, #0]


}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40013000 	.word	0x40013000

080009f8 <SPI_CS_Enable>:

void SPI_CS_Enable(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	//GPIOE.3=0
	GPIOE->ODR &=~BV(SPI_CS_PIN);
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <SPI_CS_Enable+0x18>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a03      	ldr	r2, [pc, #12]	@ (8000a10 <SPI_CS_Enable+0x18>)
 8000a02:	f023 0308 	bic.w	r3, r3, #8
 8000a06:	6153      	str	r3, [r2, #20]

}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <SPI_CS_Disable>:

void SPI_CS_Disable(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	//GPIOE.3=1
   GPIOE->ODR |=BV(SPI_CS_PIN);
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <SPI_CS_Disable+0x18>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a03      	ldr	r2, [pc, #12]	@ (8000a2c <SPI_CS_Disable+0x18>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6153      	str	r3, [r2, #20]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40021000 	.word	0x40021000

08000a30 <SPI_Transmit>:


uint16_t SPI_Transmit(uint16_t val) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	// wait until previous data is transmitted (txe)
	while(!(SPI1->SR & SPI_SR_TXE));
 8000a3a:	bf00      	nop
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <SPI_Transmit+0x40>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <SPI_Transmit+0xc>
	// write data into DR
	SPI1->DR = val;
 8000a48:	4a09      	ldr	r2, [pc, #36]	@ (8000a70 <SPI_Transmit+0x40>)
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	60d3      	str	r3, [r2, #12]
	// wait until new data is received (rxne)
	while(!(SPI1->SR & SPI_SR_RXNE));
 8000a4e:	bf00      	nop
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <SPI_Transmit+0x40>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f9      	beq.n	8000a50 <SPI_Transmit+0x20>
	// read data from DR
	val = SPI1->DR;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <SPI_Transmit+0x40>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	80fb      	strh	r3, [r7, #6]

	return val;
 8000a62:	88fb      	ldrh	r3, [r7, #6]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40013000 	.word	0x40013000

08000a74 <SPI_Receive>:


uint16_t SPI_Receive(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  uint16_t val= SPI_Transmit(0x00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ffd8 	bl	8000a30 <SPI_Transmit>
 8000a80:	4603      	mov	r3, r0
 8000a82:	80fb      	strh	r3, [r7, #6]
  return val;
 8000a84:	88fb      	ldrh	r3, [r7, #6]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f000 f89c 	bl	8000bfc <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20020000 	.word	0x20020000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000070 	.word	0x20000070
 8000af8:	200001c0 	.word	0x200001c0

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  DWT_Init();
 8000b00:	f000 f802 	bl	8000b08 <DWT_Init>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <DWT_Init+0x58>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <DWT_Init+0x58>)
 8000b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000b16:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <DWT_Init+0x58>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <DWT_Init+0x58>)
 8000b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b22:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <DWT_Init+0x5c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <DWT_Init+0x5c>)
 8000b2a:	f023 0301 	bic.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <DWT_Init+0x5c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <DWT_Init+0x5c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <DWT_Init+0x5c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000b42:	bf00      	nop
    __ASM volatile ("NOP");
 8000b44:	bf00      	nop
    __ASM volatile ("NOP");
 8000b46:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <DWT_Init+0x5c>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf0c      	ite	eq
 8000b50:	2301      	moveq	r3, #1
 8000b52:	2300      	movne	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000edf0 	.word	0xe000edf0
 8000b64:	e0001000 	.word	0xe0001000

08000b68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b6c:	f7ff ffc6 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b96:	f000 f837 	bl	8000c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9a:	f7ff fe8d 	bl	80008b8 <main>

08000b9e <LoopForever>:

LoopForever:
  b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   r0, =_estack
 8000ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000bac:	08001560 	.word	0x08001560
  ldr r2, =_sbss
 8000bb0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000bb4:	200001bc 	.word	0x200001bc

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <siprintf>:
 8000bbc:	b40e      	push	{r1, r2, r3}
 8000bbe:	b500      	push	{lr}
 8000bc0:	b09c      	sub	sp, #112	@ 0x70
 8000bc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8000bc4:	9002      	str	r0, [sp, #8]
 8000bc6:	9006      	str	r0, [sp, #24]
 8000bc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000bcc:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <siprintf+0x38>)
 8000bce:	9107      	str	r1, [sp, #28]
 8000bd0:	9104      	str	r1, [sp, #16]
 8000bd2:	4909      	ldr	r1, [pc, #36]	@ (8000bf8 <siprintf+0x3c>)
 8000bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bd8:	9105      	str	r1, [sp, #20]
 8000bda:	6800      	ldr	r0, [r0, #0]
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	a902      	add	r1, sp, #8
 8000be0:	f000 f98c 	bl	8000efc <_svfiprintf_r>
 8000be4:	9b02      	ldr	r3, [sp, #8]
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	b01c      	add	sp, #112	@ 0x70
 8000bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bf0:	b003      	add	sp, #12
 8000bf2:	4770      	bx	lr
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	ffff0208 	.word	0xffff0208

08000bfc <__errno>:
 8000bfc:	4b01      	ldr	r3, [pc, #4]	@ (8000c04 <__errno+0x8>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000004 	.word	0x20000004

08000c08 <__libc_init_array>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c40 <__libc_init_array+0x38>)
 8000c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8000c44 <__libc_init_array+0x3c>)
 8000c0e:	1b64      	subs	r4, r4, r5
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	2600      	movs	r6, #0
 8000c14:	42a6      	cmp	r6, r4
 8000c16:	d109      	bne.n	8000c2c <__libc_init_array+0x24>
 8000c18:	4d0b      	ldr	r5, [pc, #44]	@ (8000c48 <__libc_init_array+0x40>)
 8000c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8000c4c <__libc_init_array+0x44>)
 8000c1c:	f000 fc66 	bl	80014ec <_init>
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	10a4      	asrs	r4, r4, #2
 8000c24:	2600      	movs	r6, #0
 8000c26:	42a6      	cmp	r6, r4
 8000c28:	d105      	bne.n	8000c36 <__libc_init_array+0x2e>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c30:	4798      	blx	r3
 8000c32:	3601      	adds	r6, #1
 8000c34:	e7ee      	b.n	8000c14 <__libc_init_array+0xc>
 8000c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c3a:	4798      	blx	r3
 8000c3c:	3601      	adds	r6, #1
 8000c3e:	e7f2      	b.n	8000c26 <__libc_init_array+0x1e>
 8000c40:	08001558 	.word	0x08001558
 8000c44:	08001558 	.word	0x08001558
 8000c48:	08001558 	.word	0x08001558
 8000c4c:	0800155c 	.word	0x0800155c

08000c50 <__retarget_lock_acquire_recursive>:
 8000c50:	4770      	bx	lr

08000c52 <__retarget_lock_release_recursive>:
 8000c52:	4770      	bx	lr

08000c54 <_free_r>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	4605      	mov	r5, r0
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	d041      	beq.n	8000ce0 <_free_r+0x8c>
 8000c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c60:	1f0c      	subs	r4, r1, #4
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bfb8      	it	lt
 8000c66:	18e4      	addlt	r4, r4, r3
 8000c68:	f000 f8e0 	bl	8000e2c <__malloc_lock>
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce4 <_free_r+0x90>)
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	b933      	cbnz	r3, 8000c80 <_free_r+0x2c>
 8000c72:	6063      	str	r3, [r4, #4]
 8000c74:	6014      	str	r4, [r2, #0]
 8000c76:	4628      	mov	r0, r5
 8000c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c7c:	f000 b8dc 	b.w	8000e38 <__malloc_unlock>
 8000c80:	42a3      	cmp	r3, r4
 8000c82:	d908      	bls.n	8000c96 <_free_r+0x42>
 8000c84:	6820      	ldr	r0, [r4, #0]
 8000c86:	1821      	adds	r1, r4, r0
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	bf01      	itttt	eq
 8000c8c:	6819      	ldreq	r1, [r3, #0]
 8000c8e:	685b      	ldreq	r3, [r3, #4]
 8000c90:	1809      	addeq	r1, r1, r0
 8000c92:	6021      	streq	r1, [r4, #0]
 8000c94:	e7ed      	b.n	8000c72 <_free_r+0x1e>
 8000c96:	461a      	mov	r2, r3
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	b10b      	cbz	r3, 8000ca0 <_free_r+0x4c>
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d9fa      	bls.n	8000c96 <_free_r+0x42>
 8000ca0:	6811      	ldr	r1, [r2, #0]
 8000ca2:	1850      	adds	r0, r2, r1
 8000ca4:	42a0      	cmp	r0, r4
 8000ca6:	d10b      	bne.n	8000cc0 <_free_r+0x6c>
 8000ca8:	6820      	ldr	r0, [r4, #0]
 8000caa:	4401      	add	r1, r0
 8000cac:	1850      	adds	r0, r2, r1
 8000cae:	4283      	cmp	r3, r0
 8000cb0:	6011      	str	r1, [r2, #0]
 8000cb2:	d1e0      	bne.n	8000c76 <_free_r+0x22>
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	6053      	str	r3, [r2, #4]
 8000cba:	4408      	add	r0, r1
 8000cbc:	6010      	str	r0, [r2, #0]
 8000cbe:	e7da      	b.n	8000c76 <_free_r+0x22>
 8000cc0:	d902      	bls.n	8000cc8 <_free_r+0x74>
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	602b      	str	r3, [r5, #0]
 8000cc6:	e7d6      	b.n	8000c76 <_free_r+0x22>
 8000cc8:	6820      	ldr	r0, [r4, #0]
 8000cca:	1821      	adds	r1, r4, r0
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	bf04      	itt	eq
 8000cd0:	6819      	ldreq	r1, [r3, #0]
 8000cd2:	685b      	ldreq	r3, [r3, #4]
 8000cd4:	6063      	str	r3, [r4, #4]
 8000cd6:	bf04      	itt	eq
 8000cd8:	1809      	addeq	r1, r1, r0
 8000cda:	6021      	streq	r1, [r4, #0]
 8000cdc:	6054      	str	r4, [r2, #4]
 8000cde:	e7ca      	b.n	8000c76 <_free_r+0x22>
 8000ce0:	bd38      	pop	{r3, r4, r5, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001b8 	.word	0x200001b8

08000ce8 <sbrk_aligned>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	4e0f      	ldr	r6, [pc, #60]	@ (8000d28 <sbrk_aligned+0x40>)
 8000cec:	460c      	mov	r4, r1
 8000cee:	6831      	ldr	r1, [r6, #0]
 8000cf0:	4605      	mov	r5, r0
 8000cf2:	b911      	cbnz	r1, 8000cfa <sbrk_aligned+0x12>
 8000cf4:	f000 fba6 	bl	8001444 <_sbrk_r>
 8000cf8:	6030      	str	r0, [r6, #0]
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f000 fba1 	bl	8001444 <_sbrk_r>
 8000d02:	1c43      	adds	r3, r0, #1
 8000d04:	d103      	bne.n	8000d0e <sbrk_aligned+0x26>
 8000d06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
 8000d0e:	1cc4      	adds	r4, r0, #3
 8000d10:	f024 0403 	bic.w	r4, r4, #3
 8000d14:	42a0      	cmp	r0, r4
 8000d16:	d0f8      	beq.n	8000d0a <sbrk_aligned+0x22>
 8000d18:	1a21      	subs	r1, r4, r0
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f000 fb92 	bl	8001444 <_sbrk_r>
 8000d20:	3001      	adds	r0, #1
 8000d22:	d1f2      	bne.n	8000d0a <sbrk_aligned+0x22>
 8000d24:	e7ef      	b.n	8000d06 <sbrk_aligned+0x1e>
 8000d26:	bf00      	nop
 8000d28:	200001b4 	.word	0x200001b4

08000d2c <_malloc_r>:
 8000d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d30:	1ccd      	adds	r5, r1, #3
 8000d32:	f025 0503 	bic.w	r5, r5, #3
 8000d36:	3508      	adds	r5, #8
 8000d38:	2d0c      	cmp	r5, #12
 8000d3a:	bf38      	it	cc
 8000d3c:	250c      	movcc	r5, #12
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	4606      	mov	r6, r0
 8000d42:	db01      	blt.n	8000d48 <_malloc_r+0x1c>
 8000d44:	42a9      	cmp	r1, r5
 8000d46:	d904      	bls.n	8000d52 <_malloc_r+0x26>
 8000d48:	230c      	movs	r3, #12
 8000d4a:	6033      	str	r3, [r6, #0]
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e28 <_malloc_r+0xfc>
 8000d56:	f000 f869 	bl	8000e2c <__malloc_lock>
 8000d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000d5e:	461c      	mov	r4, r3
 8000d60:	bb44      	cbnz	r4, 8000db4 <_malloc_r+0x88>
 8000d62:	4629      	mov	r1, r5
 8000d64:	4630      	mov	r0, r6
 8000d66:	f7ff ffbf 	bl	8000ce8 <sbrk_aligned>
 8000d6a:	1c43      	adds	r3, r0, #1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	d158      	bne.n	8000e22 <_malloc_r+0xf6>
 8000d70:	f8d8 4000 	ldr.w	r4, [r8]
 8000d74:	4627      	mov	r7, r4
 8000d76:	2f00      	cmp	r7, #0
 8000d78:	d143      	bne.n	8000e02 <_malloc_r+0xd6>
 8000d7a:	2c00      	cmp	r4, #0
 8000d7c:	d04b      	beq.n	8000e16 <_malloc_r+0xea>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	4639      	mov	r1, r7
 8000d82:	4630      	mov	r0, r6
 8000d84:	eb04 0903 	add.w	r9, r4, r3
 8000d88:	f000 fb5c 	bl	8001444 <_sbrk_r>
 8000d8c:	4581      	cmp	r9, r0
 8000d8e:	d142      	bne.n	8000e16 <_malloc_r+0xea>
 8000d90:	6821      	ldr	r1, [r4, #0]
 8000d92:	1a6d      	subs	r5, r5, r1
 8000d94:	4629      	mov	r1, r5
 8000d96:	4630      	mov	r0, r6
 8000d98:	f7ff ffa6 	bl	8000ce8 <sbrk_aligned>
 8000d9c:	3001      	adds	r0, #1
 8000d9e:	d03a      	beq.n	8000e16 <_malloc_r+0xea>
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	442b      	add	r3, r5
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	f8d8 3000 	ldr.w	r3, [r8]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	bb62      	cbnz	r2, 8000e08 <_malloc_r+0xdc>
 8000dae:	f8c8 7000 	str.w	r7, [r8]
 8000db2:	e00f      	b.n	8000dd4 <_malloc_r+0xa8>
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	1b52      	subs	r2, r2, r5
 8000db8:	d420      	bmi.n	8000dfc <_malloc_r+0xd0>
 8000dba:	2a0b      	cmp	r2, #11
 8000dbc:	d917      	bls.n	8000dee <_malloc_r+0xc2>
 8000dbe:	1961      	adds	r1, r4, r5
 8000dc0:	42a3      	cmp	r3, r4
 8000dc2:	6025      	str	r5, [r4, #0]
 8000dc4:	bf18      	it	ne
 8000dc6:	6059      	strne	r1, [r3, #4]
 8000dc8:	6863      	ldr	r3, [r4, #4]
 8000dca:	bf08      	it	eq
 8000dcc:	f8c8 1000 	streq.w	r1, [r8]
 8000dd0:	5162      	str	r2, [r4, r5]
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f000 f82f 	bl	8000e38 <__malloc_unlock>
 8000dda:	f104 000b 	add.w	r0, r4, #11
 8000dde:	1d23      	adds	r3, r4, #4
 8000de0:	f020 0007 	bic.w	r0, r0, #7
 8000de4:	1ac2      	subs	r2, r0, r3
 8000de6:	bf1c      	itt	ne
 8000de8:	1a1b      	subne	r3, r3, r0
 8000dea:	50a3      	strne	r3, [r4, r2]
 8000dec:	e7af      	b.n	8000d4e <_malloc_r+0x22>
 8000dee:	6862      	ldr	r2, [r4, #4]
 8000df0:	42a3      	cmp	r3, r4
 8000df2:	bf0c      	ite	eq
 8000df4:	f8c8 2000 	streq.w	r2, [r8]
 8000df8:	605a      	strne	r2, [r3, #4]
 8000dfa:	e7eb      	b.n	8000dd4 <_malloc_r+0xa8>
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	6864      	ldr	r4, [r4, #4]
 8000e00:	e7ae      	b.n	8000d60 <_malloc_r+0x34>
 8000e02:	463c      	mov	r4, r7
 8000e04:	687f      	ldr	r7, [r7, #4]
 8000e06:	e7b6      	b.n	8000d76 <_malloc_r+0x4a>
 8000e08:	461a      	mov	r2, r3
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d1fb      	bne.n	8000e08 <_malloc_r+0xdc>
 8000e10:	2300      	movs	r3, #0
 8000e12:	6053      	str	r3, [r2, #4]
 8000e14:	e7de      	b.n	8000dd4 <_malloc_r+0xa8>
 8000e16:	230c      	movs	r3, #12
 8000e18:	6033      	str	r3, [r6, #0]
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f000 f80c 	bl	8000e38 <__malloc_unlock>
 8000e20:	e794      	b.n	8000d4c <_malloc_r+0x20>
 8000e22:	6005      	str	r5, [r0, #0]
 8000e24:	e7d6      	b.n	8000dd4 <_malloc_r+0xa8>
 8000e26:	bf00      	nop
 8000e28:	200001b8 	.word	0x200001b8

08000e2c <__malloc_lock>:
 8000e2c:	4801      	ldr	r0, [pc, #4]	@ (8000e34 <__malloc_lock+0x8>)
 8000e2e:	f7ff bf0f 	b.w	8000c50 <__retarget_lock_acquire_recursive>
 8000e32:	bf00      	nop
 8000e34:	200001b0 	.word	0x200001b0

08000e38 <__malloc_unlock>:
 8000e38:	4801      	ldr	r0, [pc, #4]	@ (8000e40 <__malloc_unlock+0x8>)
 8000e3a:	f7ff bf0a 	b.w	8000c52 <__retarget_lock_release_recursive>
 8000e3e:	bf00      	nop
 8000e40:	200001b0 	.word	0x200001b0

08000e44 <__ssputs_r>:
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	688e      	ldr	r6, [r1, #8]
 8000e4a:	461f      	mov	r7, r3
 8000e4c:	42be      	cmp	r6, r7
 8000e4e:	680b      	ldr	r3, [r1, #0]
 8000e50:	4682      	mov	sl, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	4690      	mov	r8, r2
 8000e56:	d82d      	bhi.n	8000eb4 <__ssputs_r+0x70>
 8000e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000e5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000e60:	d026      	beq.n	8000eb0 <__ssputs_r+0x6c>
 8000e62:	6965      	ldr	r5, [r4, #20]
 8000e64:	6909      	ldr	r1, [r1, #16]
 8000e66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e6a:	eba3 0901 	sub.w	r9, r3, r1
 8000e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000e72:	1c7b      	adds	r3, r7, #1
 8000e74:	444b      	add	r3, r9
 8000e76:	106d      	asrs	r5, r5, #1
 8000e78:	429d      	cmp	r5, r3
 8000e7a:	bf38      	it	cc
 8000e7c:	461d      	movcc	r5, r3
 8000e7e:	0553      	lsls	r3, r2, #21
 8000e80:	d527      	bpl.n	8000ed2 <__ssputs_r+0x8e>
 8000e82:	4629      	mov	r1, r5
 8000e84:	f7ff ff52 	bl	8000d2c <_malloc_r>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	b360      	cbz	r0, 8000ee6 <__ssputs_r+0xa2>
 8000e8c:	6921      	ldr	r1, [r4, #16]
 8000e8e:	464a      	mov	r2, r9
 8000e90:	f000 fae8 	bl	8001464 <memcpy>
 8000e94:	89a3      	ldrh	r3, [r4, #12]
 8000e96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e9e:	81a3      	strh	r3, [r4, #12]
 8000ea0:	6126      	str	r6, [r4, #16]
 8000ea2:	6165      	str	r5, [r4, #20]
 8000ea4:	444e      	add	r6, r9
 8000ea6:	eba5 0509 	sub.w	r5, r5, r9
 8000eaa:	6026      	str	r6, [r4, #0]
 8000eac:	60a5      	str	r5, [r4, #8]
 8000eae:	463e      	mov	r6, r7
 8000eb0:	42be      	cmp	r6, r7
 8000eb2:	d900      	bls.n	8000eb6 <__ssputs_r+0x72>
 8000eb4:	463e      	mov	r6, r7
 8000eb6:	6820      	ldr	r0, [r4, #0]
 8000eb8:	4632      	mov	r2, r6
 8000eba:	4641      	mov	r1, r8
 8000ebc:	f000 faa8 	bl	8001410 <memmove>
 8000ec0:	68a3      	ldr	r3, [r4, #8]
 8000ec2:	1b9b      	subs	r3, r3, r6
 8000ec4:	60a3      	str	r3, [r4, #8]
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	4433      	add	r3, r6
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	2000      	movs	r0, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	462a      	mov	r2, r5
 8000ed4:	f000 fad4 	bl	8001480 <_realloc_r>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	2800      	cmp	r0, #0
 8000edc:	d1e0      	bne.n	8000ea0 <__ssputs_r+0x5c>
 8000ede:	6921      	ldr	r1, [r4, #16]
 8000ee0:	4650      	mov	r0, sl
 8000ee2:	f7ff feb7 	bl	8000c54 <_free_r>
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	f8ca 3000 	str.w	r3, [sl]
 8000eec:	89a3      	ldrh	r3, [r4, #12]
 8000eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef8:	e7e9      	b.n	8000ece <__ssputs_r+0x8a>
	...

08000efc <_svfiprintf_r>:
 8000efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f00:	4698      	mov	r8, r3
 8000f02:	898b      	ldrh	r3, [r1, #12]
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	b09d      	sub	sp, #116	@ 0x74
 8000f08:	4607      	mov	r7, r0
 8000f0a:	460d      	mov	r5, r1
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	d510      	bpl.n	8000f32 <_svfiprintf_r+0x36>
 8000f10:	690b      	ldr	r3, [r1, #16]
 8000f12:	b973      	cbnz	r3, 8000f32 <_svfiprintf_r+0x36>
 8000f14:	2140      	movs	r1, #64	@ 0x40
 8000f16:	f7ff ff09 	bl	8000d2c <_malloc_r>
 8000f1a:	6028      	str	r0, [r5, #0]
 8000f1c:	6128      	str	r0, [r5, #16]
 8000f1e:	b930      	cbnz	r0, 8000f2e <_svfiprintf_r+0x32>
 8000f20:	230c      	movs	r3, #12
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f28:	b01d      	add	sp, #116	@ 0x74
 8000f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f2e:	2340      	movs	r3, #64	@ 0x40
 8000f30:	616b      	str	r3, [r5, #20]
 8000f32:	2300      	movs	r3, #0
 8000f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f36:	2320      	movs	r3, #32
 8000f38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f40:	2330      	movs	r3, #48	@ 0x30
 8000f42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80010e0 <_svfiprintf_r+0x1e4>
 8000f46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000f4a:	f04f 0901 	mov.w	r9, #1
 8000f4e:	4623      	mov	r3, r4
 8000f50:	469a      	mov	sl, r3
 8000f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f56:	b10a      	cbz	r2, 8000f5c <_svfiprintf_r+0x60>
 8000f58:	2a25      	cmp	r2, #37	@ 0x25
 8000f5a:	d1f9      	bne.n	8000f50 <_svfiprintf_r+0x54>
 8000f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8000f60:	d00b      	beq.n	8000f7a <_svfiprintf_r+0x7e>
 8000f62:	465b      	mov	r3, fp
 8000f64:	4622      	mov	r2, r4
 8000f66:	4629      	mov	r1, r5
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f7ff ff6b 	bl	8000e44 <__ssputs_r>
 8000f6e:	3001      	adds	r0, #1
 8000f70:	f000 80a7 	beq.w	80010c2 <_svfiprintf_r+0x1c6>
 8000f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f76:	445a      	add	r2, fp
 8000f78:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 809f 	beq.w	80010c2 <_svfiprintf_r+0x1c6>
 8000f84:	2300      	movs	r3, #0
 8000f86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f8e:	f10a 0a01 	add.w	sl, sl, #1
 8000f92:	9304      	str	r3, [sp, #16]
 8000f94:	9307      	str	r3, [sp, #28]
 8000f96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f9c:	4654      	mov	r4, sl
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fa4:	484e      	ldr	r0, [pc, #312]	@ (80010e0 <_svfiprintf_r+0x1e4>)
 8000fa6:	f7ff f93b 	bl	8000220 <memchr>
 8000faa:	9a04      	ldr	r2, [sp, #16]
 8000fac:	b9d8      	cbnz	r0, 8000fe6 <_svfiprintf_r+0xea>
 8000fae:	06d0      	lsls	r0, r2, #27
 8000fb0:	bf44      	itt	mi
 8000fb2:	2320      	movmi	r3, #32
 8000fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fb8:	0711      	lsls	r1, r2, #28
 8000fba:	bf44      	itt	mi
 8000fbc:	232b      	movmi	r3, #43	@ 0x2b
 8000fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8000fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fc8:	d015      	beq.n	8000ff6 <_svfiprintf_r+0xfa>
 8000fca:	9a07      	ldr	r2, [sp, #28]
 8000fcc:	4654      	mov	r4, sl
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f04f 0c0a 	mov.w	ip, #10
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fda:	3b30      	subs	r3, #48	@ 0x30
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d94b      	bls.n	8001078 <_svfiprintf_r+0x17c>
 8000fe0:	b1b0      	cbz	r0, 8001010 <_svfiprintf_r+0x114>
 8000fe2:	9207      	str	r2, [sp, #28]
 8000fe4:	e014      	b.n	8001010 <_svfiprintf_r+0x114>
 8000fe6:	eba0 0308 	sub.w	r3, r0, r8
 8000fea:	fa09 f303 	lsl.w	r3, r9, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	9304      	str	r3, [sp, #16]
 8000ff2:	46a2      	mov	sl, r4
 8000ff4:	e7d2      	b.n	8000f9c <_svfiprintf_r+0xa0>
 8000ff6:	9b03      	ldr	r3, [sp, #12]
 8000ff8:	1d19      	adds	r1, r3, #4
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	9103      	str	r1, [sp, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bfbb      	ittet	lt
 8001002:	425b      	neglt	r3, r3
 8001004:	f042 0202 	orrlt.w	r2, r2, #2
 8001008:	9307      	strge	r3, [sp, #28]
 800100a:	9307      	strlt	r3, [sp, #28]
 800100c:	bfb8      	it	lt
 800100e:	9204      	strlt	r2, [sp, #16]
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b2e      	cmp	r3, #46	@ 0x2e
 8001014:	d10a      	bne.n	800102c <_svfiprintf_r+0x130>
 8001016:	7863      	ldrb	r3, [r4, #1]
 8001018:	2b2a      	cmp	r3, #42	@ 0x2a
 800101a:	d132      	bne.n	8001082 <_svfiprintf_r+0x186>
 800101c:	9b03      	ldr	r3, [sp, #12]
 800101e:	1d1a      	adds	r2, r3, #4
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	9203      	str	r2, [sp, #12]
 8001024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001028:	3402      	adds	r4, #2
 800102a:	9305      	str	r3, [sp, #20]
 800102c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80010e4 <_svfiprintf_r+0x1e8>
 8001030:	7821      	ldrb	r1, [r4, #0]
 8001032:	2203      	movs	r2, #3
 8001034:	4650      	mov	r0, sl
 8001036:	f7ff f8f3 	bl	8000220 <memchr>
 800103a:	b138      	cbz	r0, 800104c <_svfiprintf_r+0x150>
 800103c:	9b04      	ldr	r3, [sp, #16]
 800103e:	eba0 000a 	sub.w	r0, r0, sl
 8001042:	2240      	movs	r2, #64	@ 0x40
 8001044:	4082      	lsls	r2, r0
 8001046:	4313      	orrs	r3, r2
 8001048:	3401      	adds	r4, #1
 800104a:	9304      	str	r3, [sp, #16]
 800104c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001050:	4825      	ldr	r0, [pc, #148]	@ (80010e8 <_svfiprintf_r+0x1ec>)
 8001052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001056:	2206      	movs	r2, #6
 8001058:	f7ff f8e2 	bl	8000220 <memchr>
 800105c:	2800      	cmp	r0, #0
 800105e:	d036      	beq.n	80010ce <_svfiprintf_r+0x1d2>
 8001060:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <_svfiprintf_r+0x1f0>)
 8001062:	bb1b      	cbnz	r3, 80010ac <_svfiprintf_r+0x1b0>
 8001064:	9b03      	ldr	r3, [sp, #12]
 8001066:	3307      	adds	r3, #7
 8001068:	f023 0307 	bic.w	r3, r3, #7
 800106c:	3308      	adds	r3, #8
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001072:	4433      	add	r3, r6
 8001074:	9309      	str	r3, [sp, #36]	@ 0x24
 8001076:	e76a      	b.n	8000f4e <_svfiprintf_r+0x52>
 8001078:	fb0c 3202 	mla	r2, ip, r2, r3
 800107c:	460c      	mov	r4, r1
 800107e:	2001      	movs	r0, #1
 8001080:	e7a8      	b.n	8000fd4 <_svfiprintf_r+0xd8>
 8001082:	2300      	movs	r3, #0
 8001084:	3401      	adds	r4, #1
 8001086:	9305      	str	r3, [sp, #20]
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 0c0a 	mov.w	ip, #10
 800108e:	4620      	mov	r0, r4
 8001090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001094:	3a30      	subs	r2, #48	@ 0x30
 8001096:	2a09      	cmp	r2, #9
 8001098:	d903      	bls.n	80010a2 <_svfiprintf_r+0x1a6>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0c6      	beq.n	800102c <_svfiprintf_r+0x130>
 800109e:	9105      	str	r1, [sp, #20]
 80010a0:	e7c4      	b.n	800102c <_svfiprintf_r+0x130>
 80010a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80010a6:	4604      	mov	r4, r0
 80010a8:	2301      	movs	r3, #1
 80010aa:	e7f0      	b.n	800108e <_svfiprintf_r+0x192>
 80010ac:	ab03      	add	r3, sp, #12
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	462a      	mov	r2, r5
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <_svfiprintf_r+0x1f4>)
 80010b4:	a904      	add	r1, sp, #16
 80010b6:	4638      	mov	r0, r7
 80010b8:	f3af 8000 	nop.w
 80010bc:	1c42      	adds	r2, r0, #1
 80010be:	4606      	mov	r6, r0
 80010c0:	d1d6      	bne.n	8001070 <_svfiprintf_r+0x174>
 80010c2:	89ab      	ldrh	r3, [r5, #12]
 80010c4:	065b      	lsls	r3, r3, #25
 80010c6:	f53f af2d 	bmi.w	8000f24 <_svfiprintf_r+0x28>
 80010ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80010cc:	e72c      	b.n	8000f28 <_svfiprintf_r+0x2c>
 80010ce:	ab03      	add	r3, sp, #12
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	462a      	mov	r2, r5
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <_svfiprintf_r+0x1f4>)
 80010d6:	a904      	add	r1, sp, #16
 80010d8:	4638      	mov	r0, r7
 80010da:	f000 f879 	bl	80011d0 <_printf_i>
 80010de:	e7ed      	b.n	80010bc <_svfiprintf_r+0x1c0>
 80010e0:	0800151b 	.word	0x0800151b
 80010e4:	08001521 	.word	0x08001521
 80010e8:	08001525 	.word	0x08001525
 80010ec:	00000000 	.word	0x00000000
 80010f0:	08000e45 	.word	0x08000e45

080010f4 <_printf_common>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	4616      	mov	r6, r2
 80010fa:	4698      	mov	r8, r3
 80010fc:	688a      	ldr	r2, [r1, #8]
 80010fe:	690b      	ldr	r3, [r1, #16]
 8001100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001104:	4293      	cmp	r3, r2
 8001106:	bfb8      	it	lt
 8001108:	4613      	movlt	r3, r2
 800110a:	6033      	str	r3, [r6, #0]
 800110c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001110:	4607      	mov	r7, r0
 8001112:	460c      	mov	r4, r1
 8001114:	b10a      	cbz	r2, 800111a <_printf_common+0x26>
 8001116:	3301      	adds	r3, #1
 8001118:	6033      	str	r3, [r6, #0]
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	0699      	lsls	r1, r3, #26
 800111e:	bf42      	ittt	mi
 8001120:	6833      	ldrmi	r3, [r6, #0]
 8001122:	3302      	addmi	r3, #2
 8001124:	6033      	strmi	r3, [r6, #0]
 8001126:	6825      	ldr	r5, [r4, #0]
 8001128:	f015 0506 	ands.w	r5, r5, #6
 800112c:	d106      	bne.n	800113c <_printf_common+0x48>
 800112e:	f104 0a19 	add.w	sl, r4, #25
 8001132:	68e3      	ldr	r3, [r4, #12]
 8001134:	6832      	ldr	r2, [r6, #0]
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	42ab      	cmp	r3, r5
 800113a:	dc26      	bgt.n	800118a <_printf_common+0x96>
 800113c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	3b00      	subs	r3, #0
 8001144:	bf18      	it	ne
 8001146:	2301      	movne	r3, #1
 8001148:	0692      	lsls	r2, r2, #26
 800114a:	d42b      	bmi.n	80011a4 <_printf_common+0xb0>
 800114c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001150:	4641      	mov	r1, r8
 8001152:	4638      	mov	r0, r7
 8001154:	47c8      	blx	r9
 8001156:	3001      	adds	r0, #1
 8001158:	d01e      	beq.n	8001198 <_printf_common+0xa4>
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	6922      	ldr	r2, [r4, #16]
 800115e:	f003 0306 	and.w	r3, r3, #6
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf02      	ittt	eq
 8001166:	68e5      	ldreq	r5, [r4, #12]
 8001168:	6833      	ldreq	r3, [r6, #0]
 800116a:	1aed      	subeq	r5, r5, r3
 800116c:	68a3      	ldr	r3, [r4, #8]
 800116e:	bf0c      	ite	eq
 8001170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001174:	2500      	movne	r5, #0
 8001176:	4293      	cmp	r3, r2
 8001178:	bfc4      	itt	gt
 800117a:	1a9b      	subgt	r3, r3, r2
 800117c:	18ed      	addgt	r5, r5, r3
 800117e:	2600      	movs	r6, #0
 8001180:	341a      	adds	r4, #26
 8001182:	42b5      	cmp	r5, r6
 8001184:	d11a      	bne.n	80011bc <_printf_common+0xc8>
 8001186:	2000      	movs	r0, #0
 8001188:	e008      	b.n	800119c <_printf_common+0xa8>
 800118a:	2301      	movs	r3, #1
 800118c:	4652      	mov	r2, sl
 800118e:	4641      	mov	r1, r8
 8001190:	4638      	mov	r0, r7
 8001192:	47c8      	blx	r9
 8001194:	3001      	adds	r0, #1
 8001196:	d103      	bne.n	80011a0 <_printf_common+0xac>
 8001198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	3501      	adds	r5, #1
 80011a2:	e7c6      	b.n	8001132 <_printf_common+0x3e>
 80011a4:	18e1      	adds	r1, r4, r3
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	2030      	movs	r0, #48	@ 0x30
 80011aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80011ae:	4422      	add	r2, r4
 80011b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80011b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80011b8:	3302      	adds	r3, #2
 80011ba:	e7c7      	b.n	800114c <_printf_common+0x58>
 80011bc:	2301      	movs	r3, #1
 80011be:	4622      	mov	r2, r4
 80011c0:	4641      	mov	r1, r8
 80011c2:	4638      	mov	r0, r7
 80011c4:	47c8      	blx	r9
 80011c6:	3001      	adds	r0, #1
 80011c8:	d0e6      	beq.n	8001198 <_printf_common+0xa4>
 80011ca:	3601      	adds	r6, #1
 80011cc:	e7d9      	b.n	8001182 <_printf_common+0x8e>
	...

080011d0 <_printf_i>:
 80011d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011d4:	7e0f      	ldrb	r7, [r1, #24]
 80011d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80011d8:	2f78      	cmp	r7, #120	@ 0x78
 80011da:	4691      	mov	r9, r2
 80011dc:	4680      	mov	r8, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	469a      	mov	sl, r3
 80011e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80011e6:	d807      	bhi.n	80011f8 <_printf_i+0x28>
 80011e8:	2f62      	cmp	r7, #98	@ 0x62
 80011ea:	d80a      	bhi.n	8001202 <_printf_i+0x32>
 80011ec:	2f00      	cmp	r7, #0
 80011ee:	f000 80d2 	beq.w	8001396 <_printf_i+0x1c6>
 80011f2:	2f58      	cmp	r7, #88	@ 0x58
 80011f4:	f000 80b9 	beq.w	800136a <_printf_i+0x19a>
 80011f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001200:	e03a      	b.n	8001278 <_printf_i+0xa8>
 8001202:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001206:	2b15      	cmp	r3, #21
 8001208:	d8f6      	bhi.n	80011f8 <_printf_i+0x28>
 800120a:	a101      	add	r1, pc, #4	@ (adr r1, 8001210 <_printf_i+0x40>)
 800120c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001210:	08001269 	.word	0x08001269
 8001214:	0800127d 	.word	0x0800127d
 8001218:	080011f9 	.word	0x080011f9
 800121c:	080011f9 	.word	0x080011f9
 8001220:	080011f9 	.word	0x080011f9
 8001224:	080011f9 	.word	0x080011f9
 8001228:	0800127d 	.word	0x0800127d
 800122c:	080011f9 	.word	0x080011f9
 8001230:	080011f9 	.word	0x080011f9
 8001234:	080011f9 	.word	0x080011f9
 8001238:	080011f9 	.word	0x080011f9
 800123c:	0800137d 	.word	0x0800137d
 8001240:	080012a7 	.word	0x080012a7
 8001244:	08001337 	.word	0x08001337
 8001248:	080011f9 	.word	0x080011f9
 800124c:	080011f9 	.word	0x080011f9
 8001250:	0800139f 	.word	0x0800139f
 8001254:	080011f9 	.word	0x080011f9
 8001258:	080012a7 	.word	0x080012a7
 800125c:	080011f9 	.word	0x080011f9
 8001260:	080011f9 	.word	0x080011f9
 8001264:	0800133f 	.word	0x0800133f
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	1d1a      	adds	r2, r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6032      	str	r2, [r6, #0]
 8001270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001274:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001278:	2301      	movs	r3, #1
 800127a:	e09d      	b.n	80013b8 <_printf_i+0x1e8>
 800127c:	6833      	ldr	r3, [r6, #0]
 800127e:	6820      	ldr	r0, [r4, #0]
 8001280:	1d19      	adds	r1, r3, #4
 8001282:	6031      	str	r1, [r6, #0]
 8001284:	0606      	lsls	r6, r0, #24
 8001286:	d501      	bpl.n	800128c <_printf_i+0xbc>
 8001288:	681d      	ldr	r5, [r3, #0]
 800128a:	e003      	b.n	8001294 <_printf_i+0xc4>
 800128c:	0645      	lsls	r5, r0, #25
 800128e:	d5fb      	bpl.n	8001288 <_printf_i+0xb8>
 8001290:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001294:	2d00      	cmp	r5, #0
 8001296:	da03      	bge.n	80012a0 <_printf_i+0xd0>
 8001298:	232d      	movs	r3, #45	@ 0x2d
 800129a:	426d      	negs	r5, r5
 800129c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012a0:	4859      	ldr	r0, [pc, #356]	@ (8001408 <_printf_i+0x238>)
 80012a2:	230a      	movs	r3, #10
 80012a4:	e011      	b.n	80012ca <_printf_i+0xfa>
 80012a6:	6821      	ldr	r1, [r4, #0]
 80012a8:	6833      	ldr	r3, [r6, #0]
 80012aa:	0608      	lsls	r0, r1, #24
 80012ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80012b0:	d402      	bmi.n	80012b8 <_printf_i+0xe8>
 80012b2:	0649      	lsls	r1, r1, #25
 80012b4:	bf48      	it	mi
 80012b6:	b2ad      	uxthmi	r5, r5
 80012b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80012ba:	4853      	ldr	r0, [pc, #332]	@ (8001408 <_printf_i+0x238>)
 80012bc:	6033      	str	r3, [r6, #0]
 80012be:	bf14      	ite	ne
 80012c0:	230a      	movne	r3, #10
 80012c2:	2308      	moveq	r3, #8
 80012c4:	2100      	movs	r1, #0
 80012c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80012ca:	6866      	ldr	r6, [r4, #4]
 80012cc:	60a6      	str	r6, [r4, #8]
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	bfa2      	ittt	ge
 80012d2:	6821      	ldrge	r1, [r4, #0]
 80012d4:	f021 0104 	bicge.w	r1, r1, #4
 80012d8:	6021      	strge	r1, [r4, #0]
 80012da:	b90d      	cbnz	r5, 80012e0 <_printf_i+0x110>
 80012dc:	2e00      	cmp	r6, #0
 80012de:	d04b      	beq.n	8001378 <_printf_i+0x1a8>
 80012e0:	4616      	mov	r6, r2
 80012e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80012e6:	fb03 5711 	mls	r7, r3, r1, r5
 80012ea:	5dc7      	ldrb	r7, [r0, r7]
 80012ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012f0:	462f      	mov	r7, r5
 80012f2:	42bb      	cmp	r3, r7
 80012f4:	460d      	mov	r5, r1
 80012f6:	d9f4      	bls.n	80012e2 <_printf_i+0x112>
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d10b      	bne.n	8001314 <_printf_i+0x144>
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	07df      	lsls	r7, r3, #31
 8001300:	d508      	bpl.n	8001314 <_printf_i+0x144>
 8001302:	6923      	ldr	r3, [r4, #16]
 8001304:	6861      	ldr	r1, [r4, #4]
 8001306:	4299      	cmp	r1, r3
 8001308:	bfde      	ittt	le
 800130a:	2330      	movle	r3, #48	@ 0x30
 800130c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001310:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001314:	1b92      	subs	r2, r2, r6
 8001316:	6122      	str	r2, [r4, #16]
 8001318:	f8cd a000 	str.w	sl, [sp]
 800131c:	464b      	mov	r3, r9
 800131e:	aa03      	add	r2, sp, #12
 8001320:	4621      	mov	r1, r4
 8001322:	4640      	mov	r0, r8
 8001324:	f7ff fee6 	bl	80010f4 <_printf_common>
 8001328:	3001      	adds	r0, #1
 800132a:	d14a      	bne.n	80013c2 <_printf_i+0x1f2>
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001330:	b004      	add	sp, #16
 8001332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	4833      	ldr	r0, [pc, #204]	@ (800140c <_printf_i+0x23c>)
 8001340:	2778      	movs	r7, #120	@ 0x78
 8001342:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	6831      	ldr	r1, [r6, #0]
 800134a:	061f      	lsls	r7, r3, #24
 800134c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001350:	d402      	bmi.n	8001358 <_printf_i+0x188>
 8001352:	065f      	lsls	r7, r3, #25
 8001354:	bf48      	it	mi
 8001356:	b2ad      	uxthmi	r5, r5
 8001358:	6031      	str	r1, [r6, #0]
 800135a:	07d9      	lsls	r1, r3, #31
 800135c:	bf44      	itt	mi
 800135e:	f043 0320 	orrmi.w	r3, r3, #32
 8001362:	6023      	strmi	r3, [r4, #0]
 8001364:	b11d      	cbz	r5, 800136e <_printf_i+0x19e>
 8001366:	2310      	movs	r3, #16
 8001368:	e7ac      	b.n	80012c4 <_printf_i+0xf4>
 800136a:	4827      	ldr	r0, [pc, #156]	@ (8001408 <_printf_i+0x238>)
 800136c:	e7e9      	b.n	8001342 <_printf_i+0x172>
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f023 0320 	bic.w	r3, r3, #32
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	e7f6      	b.n	8001366 <_printf_i+0x196>
 8001378:	4616      	mov	r6, r2
 800137a:	e7bd      	b.n	80012f8 <_printf_i+0x128>
 800137c:	6833      	ldr	r3, [r6, #0]
 800137e:	6825      	ldr	r5, [r4, #0]
 8001380:	6961      	ldr	r1, [r4, #20]
 8001382:	1d18      	adds	r0, r3, #4
 8001384:	6030      	str	r0, [r6, #0]
 8001386:	062e      	lsls	r6, r5, #24
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	d501      	bpl.n	8001390 <_printf_i+0x1c0>
 800138c:	6019      	str	r1, [r3, #0]
 800138e:	e002      	b.n	8001396 <_printf_i+0x1c6>
 8001390:	0668      	lsls	r0, r5, #25
 8001392:	d5fb      	bpl.n	800138c <_printf_i+0x1bc>
 8001394:	8019      	strh	r1, [r3, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	6123      	str	r3, [r4, #16]
 800139a:	4616      	mov	r6, r2
 800139c:	e7bc      	b.n	8001318 <_printf_i+0x148>
 800139e:	6833      	ldr	r3, [r6, #0]
 80013a0:	1d1a      	adds	r2, r3, #4
 80013a2:	6032      	str	r2, [r6, #0]
 80013a4:	681e      	ldr	r6, [r3, #0]
 80013a6:	6862      	ldr	r2, [r4, #4]
 80013a8:	2100      	movs	r1, #0
 80013aa:	4630      	mov	r0, r6
 80013ac:	f7fe ff38 	bl	8000220 <memchr>
 80013b0:	b108      	cbz	r0, 80013b6 <_printf_i+0x1e6>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	6060      	str	r0, [r4, #4]
 80013b6:	6863      	ldr	r3, [r4, #4]
 80013b8:	6123      	str	r3, [r4, #16]
 80013ba:	2300      	movs	r3, #0
 80013bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013c0:	e7aa      	b.n	8001318 <_printf_i+0x148>
 80013c2:	6923      	ldr	r3, [r4, #16]
 80013c4:	4632      	mov	r2, r6
 80013c6:	4649      	mov	r1, r9
 80013c8:	4640      	mov	r0, r8
 80013ca:	47d0      	blx	sl
 80013cc:	3001      	adds	r0, #1
 80013ce:	d0ad      	beq.n	800132c <_printf_i+0x15c>
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	079b      	lsls	r3, r3, #30
 80013d4:	d413      	bmi.n	80013fe <_printf_i+0x22e>
 80013d6:	68e0      	ldr	r0, [r4, #12]
 80013d8:	9b03      	ldr	r3, [sp, #12]
 80013da:	4298      	cmp	r0, r3
 80013dc:	bfb8      	it	lt
 80013de:	4618      	movlt	r0, r3
 80013e0:	e7a6      	b.n	8001330 <_printf_i+0x160>
 80013e2:	2301      	movs	r3, #1
 80013e4:	4632      	mov	r2, r6
 80013e6:	4649      	mov	r1, r9
 80013e8:	4640      	mov	r0, r8
 80013ea:	47d0      	blx	sl
 80013ec:	3001      	adds	r0, #1
 80013ee:	d09d      	beq.n	800132c <_printf_i+0x15c>
 80013f0:	3501      	adds	r5, #1
 80013f2:	68e3      	ldr	r3, [r4, #12]
 80013f4:	9903      	ldr	r1, [sp, #12]
 80013f6:	1a5b      	subs	r3, r3, r1
 80013f8:	42ab      	cmp	r3, r5
 80013fa:	dcf2      	bgt.n	80013e2 <_printf_i+0x212>
 80013fc:	e7eb      	b.n	80013d6 <_printf_i+0x206>
 80013fe:	2500      	movs	r5, #0
 8001400:	f104 0619 	add.w	r6, r4, #25
 8001404:	e7f5      	b.n	80013f2 <_printf_i+0x222>
 8001406:	bf00      	nop
 8001408:	0800152c 	.word	0x0800152c
 800140c:	0800153d 	.word	0x0800153d

08001410 <memmove>:
 8001410:	4288      	cmp	r0, r1
 8001412:	b510      	push	{r4, lr}
 8001414:	eb01 0402 	add.w	r4, r1, r2
 8001418:	d902      	bls.n	8001420 <memmove+0x10>
 800141a:	4284      	cmp	r4, r0
 800141c:	4623      	mov	r3, r4
 800141e:	d807      	bhi.n	8001430 <memmove+0x20>
 8001420:	1e43      	subs	r3, r0, #1
 8001422:	42a1      	cmp	r1, r4
 8001424:	d008      	beq.n	8001438 <memmove+0x28>
 8001426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800142a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800142e:	e7f8      	b.n	8001422 <memmove+0x12>
 8001430:	4402      	add	r2, r0
 8001432:	4601      	mov	r1, r0
 8001434:	428a      	cmp	r2, r1
 8001436:	d100      	bne.n	800143a <memmove+0x2a>
 8001438:	bd10      	pop	{r4, pc}
 800143a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800143e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001442:	e7f7      	b.n	8001434 <memmove+0x24>

08001444 <_sbrk_r>:
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4d06      	ldr	r5, [pc, #24]	@ (8001460 <_sbrk_r+0x1c>)
 8001448:	2300      	movs	r3, #0
 800144a:	4604      	mov	r4, r0
 800144c:	4608      	mov	r0, r1
 800144e:	602b      	str	r3, [r5, #0]
 8001450:	f7ff fb1e 	bl	8000a90 <_sbrk>
 8001454:	1c43      	adds	r3, r0, #1
 8001456:	d102      	bne.n	800145e <_sbrk_r+0x1a>
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	b103      	cbz	r3, 800145e <_sbrk_r+0x1a>
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	bd38      	pop	{r3, r4, r5, pc}
 8001460:	200001ac 	.word	0x200001ac

08001464 <memcpy>:
 8001464:	440a      	add	r2, r1
 8001466:	4291      	cmp	r1, r2
 8001468:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800146c:	d100      	bne.n	8001470 <memcpy+0xc>
 800146e:	4770      	bx	lr
 8001470:	b510      	push	{r4, lr}
 8001472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800147a:	4291      	cmp	r1, r2
 800147c:	d1f9      	bne.n	8001472 <memcpy+0xe>
 800147e:	bd10      	pop	{r4, pc}

08001480 <_realloc_r>:
 8001480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001484:	4680      	mov	r8, r0
 8001486:	4615      	mov	r5, r2
 8001488:	460c      	mov	r4, r1
 800148a:	b921      	cbnz	r1, 8001496 <_realloc_r+0x16>
 800148c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001490:	4611      	mov	r1, r2
 8001492:	f7ff bc4b 	b.w	8000d2c <_malloc_r>
 8001496:	b92a      	cbnz	r2, 80014a4 <_realloc_r+0x24>
 8001498:	f7ff fbdc 	bl	8000c54 <_free_r>
 800149c:	2400      	movs	r4, #0
 800149e:	4620      	mov	r0, r4
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a4:	f000 f81a 	bl	80014dc <_malloc_usable_size_r>
 80014a8:	4285      	cmp	r5, r0
 80014aa:	4606      	mov	r6, r0
 80014ac:	d802      	bhi.n	80014b4 <_realloc_r+0x34>
 80014ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80014b2:	d8f4      	bhi.n	800149e <_realloc_r+0x1e>
 80014b4:	4629      	mov	r1, r5
 80014b6:	4640      	mov	r0, r8
 80014b8:	f7ff fc38 	bl	8000d2c <_malloc_r>
 80014bc:	4607      	mov	r7, r0
 80014be:	2800      	cmp	r0, #0
 80014c0:	d0ec      	beq.n	800149c <_realloc_r+0x1c>
 80014c2:	42b5      	cmp	r5, r6
 80014c4:	462a      	mov	r2, r5
 80014c6:	4621      	mov	r1, r4
 80014c8:	bf28      	it	cs
 80014ca:	4632      	movcs	r2, r6
 80014cc:	f7ff ffca 	bl	8001464 <memcpy>
 80014d0:	4621      	mov	r1, r4
 80014d2:	4640      	mov	r0, r8
 80014d4:	f7ff fbbe 	bl	8000c54 <_free_r>
 80014d8:	463c      	mov	r4, r7
 80014da:	e7e0      	b.n	800149e <_realloc_r+0x1e>

080014dc <_malloc_usable_size_r>:
 80014dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014e0:	1f18      	subs	r0, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bfbc      	itt	lt
 80014e6:	580b      	ldrlt	r3, [r1, r0]
 80014e8:	18c0      	addlt	r0, r0, r3
 80014ea:	4770      	bx	lr

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
